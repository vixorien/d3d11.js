function D3D11CreateDevice(n,t){var r=(t&D3D11_JS_CREATE_DEVICE_ALPHA_CANVAS)==D3D11_JS_CREATE_DEVICE_ALPHA_CANVAS,u=(t&D3D11_JS_CREATE_DEVICE_PREMULTIPLIED_ALPHA)==D3D11_JS_CREATE_DEVICE_PREMULTIPLIED_ALPHA;const i=n.getContext("webgl2",{alpha:r,premultipliedAlpha:u,antialias:!1,depth:!1,preserveDrawingBuffer:!0});if(i===null)throw new Error("Unable to create internal WebGL2 rendering context for d3d11.js");return new(class extends ID3D11Device{})(i)}function D3D11CreateDeviceAndSwapChain(n,t,i){let r=D3D11CreateDevice(n,t),u=r.GetImmediateContext(),f=DXGICreateSwapChain(r,i);return[r,u,f]}function DXGICreateSwapChain(n,t){return new(class extends IDXGISwapChain{})(n,t)}function D3D11CalcSubresource(n,t,i){return n+t*i}const D3D11_APPEND_ALIGNED_ELEMENT=4294967295,D3D11_BIND_VERTEX_BUFFER=1,D3D11_BIND_INDEX_BUFFER=2,D3D11_BIND_CONSTANT_BUFFER=4,D3D11_BIND_SHADER_RESOURCE=8,D3D11_BIND_RENDER_TARGET=32,D3D11_BIND_DEPTH_STENCIL=64,D3D11_COMPARISON_NEVER=1,D3D11_COMPARISON_LESS=2,D3D11_COMPARISON_EQUAL=3,D3D11_COMPARISON_LESS_EQUAL=4,D3D11_COMPARISON_GREATER=5,D3D11_COMPARISON_NOT_EQUAL=6,D3D11_COMPARISON_GREATER_EQUAL=7,D3D11_COMPARISON_ALWAYS=8,D3D11_CPU_ACCESS_WRITE=65536,D3D11_CPU_ACCESS_READ=131072,D3D11_JS_CREATE_DEVICE_ALPHA_CANVAS=1,D3D11_JS_CREATE_DEVICE_PREMULTIPLIED_ALPHA=2,D3D11_CULL_NONE=1,D3D11_CULL_FRONT=2,D3D11_CULL_BACK=3,D3D11_DEFAULT_STENCIL_READ_MASK=255,D3D11_DEFAULT_STENCIL_WRITE_MASK=255,D3D11_DEPTH_WRITE_MASK_ZERO=0,D3D11_DEPTH_WRITE_MASK_ALL=1,D3D11_DSV_DIMENSION_TEXTURE1D=1,D3D11_DSV_DIMENSION_TEXTURE1DARRAY=2,D3D11_DSV_DIMENSION_TEXTURE2D=3,D3D11_DSV_DIMENSION_TEXTURE2DARRAY=4,D3D11_DSV_READ_ONLY_DEPTH=1,D3D11_DSV_READ_ONLY_STENCIL=2,D3D11_JS_FEATURE_ANISOTROPIC_FILTER_SUPPORT=0,D3D11_JS_FEATURE_FLOAT_TEXTURE_SUPPORT=1,D3D11_JS_FEATURE_FLOAT_TEXTURE_FILTER_SUPPORT=2,D3D11_JS_FEATURE_COMPRESSED_TEXTURE_S3TC_SUPPORT=3,D3D11_FILL_WIREFRAME=2,D3D11_FILL_SOLID=3,D3D11_FILTER_MIN_MAG_MIP_POINT=0,D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR=1,D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT=4,D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR=5,D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT=16,D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR=17,D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT=20,D3D11_FILTER_MIN_MAG_MIP_LINEAR=21,D3D11_FILTER_ANISOTROPIC=85,D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT=128,D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR=129,D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT=132,D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR=133,D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT=144,D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR=145,D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT=148,D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR=149,D3D11_FILTER_COMPARISON_ANISOTROPIC=213,D3D11_FLOAT32_MAX=3402823466e29,D3D11_CLEAR_DEPTH=1,D3D11_CLEAR_STENCIL=2,D3D11_INPUT_PER_VERTEX_DATA=0,D3D11_INPUT_PER_INSTANCE_DATA=1,D3D11_PRIMITIVE_TOPOLOGY_UNDEFINED=0,D3D11_PRIMITIVE_TOPOLOGY_POINTLIST=1,D3D11_PRIMITIVE_TOPOLOGY_LINELIST=2,D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP=3,D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST=4,D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP=5,D3D11_RESOURCE_DIMENSION_UNKNOWN=0,D3D11_RESOURCE_DIMENSION_BUFFER=1,D3D11_RESOURCE_DIMENSION_TEXTURE1D=2,D3D11_RESOURCE_DIMENSION_TEXTURE2D=3,D3D11_RESOURCE_DIMENSION_TEXTURE3D=4,D3D11_RESOURCE_MISC_GENERATE_MIPS=1,D3D11_RESOURCE_MISC_TEXTURECUBE=4,D3D11_SRV_DIMENSION_TEXTURE1D=2,D3D11_SRV_DIMENSION_TEXTURE1DARRAY=3,D3D11_SRV_DIMENSION_TEXTURE2D=4,D3D11_SRV_DIMENSION_TEXTURE2DARRAY=5,D3D11_SRV_DIMENSION_TEXTURE3D=8,D3D11_SRV_DIMENSION_TEXTURECUBE=9,D3D11_STENCIL_OP_KEEP=1,D3D11_STENCIL_OP_ZERO=2,D3D11_STENCIL_OP_REPLACE=3,D3D11_STENCIL_OP_INCR_SAT=4,D3D11_STENCIL_OP_DECR_SAT=5,D3D11_STENCIL_OP_INVERT=6,D3D11_STENCIL_OP_INCR=7,D3D11_STENCIL_OP_DECR=8,D3D11_RTV_DIMENSION_TEXTURE1D=2,D3D11_RTV_DIMENSION_TEXTURE1DARRAY=3,D3D11_RTV_DIMENSION_TEXTURE2D=4,D3D11_RTV_DIMENSION_TEXTURE2DARRAY=5,D3D11_RTV_DIMENSION_TEXTURE3D=8,D3D11_TEXTURE_ADDRESS_WRAP=1,D3D11_TEXTURE_ADDRESS_MIRROR=2,D3D11_TEXTURE_ADDRESS_CLAMP=3,D3D11_TEXTURE_ADDRESS_BORDER=4,D3D11_TEXTURE_ADDRESS_MIRROR_ONCE=5,D3D11_USAGE_DEFAULT=0,D3D11_USAGE_IMMUTABLE=1,D3D11_USAGE_DYNAMIC=2,D3D11_USAGE_STAGING=3,DXGI_FORMAT_UNKNOWN=0,DXGI_FORMAT_R32G32B32A32_FLOAT=2,DXGI_FORMAT_R32G32B32_FLOAT=6,DXGI_FORMAT_R16G16B16A16_FLOAT=10,DXGI_FORMAT_R32G32_FLOAT=16,DXGI_FORMAT_R8G8B8A8_UNORM=28,DXGI_FORMAT_R8G8B8A8_UNORM_SRGB=29,DXGI_FORMAT_R16G16_FLOAT=34,DXGI_FORMAT_D32_FLOAT=40,DXGI_FORMAT_R32_FLOAT=41,DXGI_FORMAT_R32_UINT=42,DXGI_FORMAT_D24_UNORM_S8_UINT=45,DXGI_FORMAT_D16_UNORM=55,DXGI_FORMAT_R16_UINT=57,DXGI_FORMAT_BC1_UNORM=71,DXGI_FORMAT_BC2_UNORM=74,DXGI_FORMAT_BC3_UNORM=77,DXGI_FORMAT_B8G8R8A8_UNORM=87,DXGI_FORMAT_B8G8R8X8_UNORM=88;class D3D11_BUFFER_DESC{ByteWidth;Usage;BindFlags;CPUAccessFlags;MiscFlags;StructureByteStride;constructor(n,t,i,r=0,u=0,f=0){this.ByteWidth=n;this.Usage=t;this.BindFlags=i;this.CPUAccessFlags=r;this.MiscFlags=u;this.StructureByteStride=f}Copy(){return new D3D11_BUFFER_DESC(this.ByteWidth,this.Usage,this.BindFlags,this.CPUAccessFlags,this.MiscFlags,this.StructureByteStride)}}class D3D11_DEPTH_STENCIL_DESC{DepthEnable;DepthWriteMask;DepthFunc;StencilEnable;StencilReadMask;StencilWriteMask;FrontFace;BackFace;constructor(n=true,t=D3D11_DEPTH_WRITE_MASK_ALL,i=D3D11_COMPARISON_LESS,r=false,u=D3D11_DEFAULT_STENCIL_READ_MASK,f=D3D11_DEFAULT_STENCIL_READ_MASK,e=new D3D11_DEPTH_STENCILOP_DESC,o=new D3D11_DEPTH_STENCILOP_DESC){this.DepthEnable=n;this.DepthWriteMask=t;this.DepthFunc=i;this.StencilEnable=r;this.StencilReadMask=u;this.StencilWriteMask=f;this.FrontFace=e.Copy();this.BackFace=o.Copy()}Copy(){return new D3D11_DEPTH_STENCIL_DESC(this.DepthEnable,this.DepthWriteMask,this.DepthFunc,this.StencilEnable,this.StencilReadMask,this.StencilWriteMask,this.FrontFace.Copy(),this.BackFace.Copy())}}class D3D11_DEPTH_STENCILOP_DESC{StencilFailOp;StencilDepthFailOp;StencilPassOp;StencilFunc;constructor(n=D3D11_STENCIL_OP_KEEP,t=D3D11_STENCIL_OP_KEEP,i=D3D11_STENCIL_OP_KEEP,r=D3D11_COMPARISON_ALWAYS){this.StencilFailOp=n;this.StencilDepthFailOp=t;this.StencilPassOp=i;this.StencilFunc=r}Copy(){return new D3D11_DEPTH_STENCILOP_DESC(this.StencilFailOp,this.StencilDepthFailOp,this.StencilPassOp,this.StencilFunc)}}class D3D11_DEPTH_STENCIL_VIEW_DESC{Format;ViewDimension;Flags;MipSlice;FirstArraySlice;ArraySize;constructor(n,t,i=0,r=0,u=0,f=1){this.Format=n;this.ViewDimension=t;this.Flags=i;this.MipSlice=r;this.FirstArraySlice=u;this.ArraySize=f}Copy(){return new D3D11_DEPTH_STENCIL_VIEW_DESC(this.Format,this.ViewDimension,this.Flags,this.MipSlice,this.FirstArraySlice,this.ArraySize)}}class D3D11_INPUT_ELEMENT_DESC{SemanticName;SemanticIndex;Format;InputSlot;AlignedByteOffset;InputSlotClass;InstanceDataStepRate;constructor(n,t,i,r,u,f,e){this.SemanticName=n;this.SemanticIndex=t;this.Format=i;this.InputSlot=r;this.AlignedByteOffset=u;this.InputSlotClass=f;this.InstanceDataStepRate=e}Copy(){return new D3D11_INPUT_ELEMENT_DESC(this.SemanticName,this.SemanticIndex,this.Format,this.InputSlot,this.AlignedByteOffset,this.InputSlotClass,this.InstanceDataStepRate)}}class D3D11_RASTERIZER_DESC{FillMode;CullMode;FrontCounterClockwise;DepthBias;DepthBiasClamp;SlopeScaledDepthBias;DepthClipEnable;ScissorEnable;MultisampleEnable;AntiasliasedLineEnable;constructor(n,t,i=false,r=0,u=0,f=0,e=true,o=false,s=false,h=false){this.FillMode=n;this.CullMode=t;this.FrontCounterClockwise=i;this.DepthBias=r;this.DepthBiasClamp=u;this.SlopeScaledDepthBias=f;this.DepthClipEnable=e;this.ScissorEnable=o;this.MultisampleEnable=s;this.AntiasliasedLineEnable=h}Copy(){return new D3D11_RASTERIZER_DESC(this.FillMode,this.CullMode,this.FrontCounterClockwise,this.DepthBias,this.DepthBiasClamp,this.SlopeScaledDepthBias,this.DepthClipEnable,this.ScissorEnable,this.MultisampleEnable,this.AntiasliasedLineEnable)}}class D3D11_RENDER_TARGET_VIEW_DESC{Format;ViewDimension;MipSlice;FirstArraySlice;ArraySize;constructor(n,t,i=0,r=0,u=1){this.Format=n;this.ViewDimension=t;this.MipSlice=i;this.FirstArraySlice=r;this.ArraySize=u}Copy(){return new D3D11_RENDER_TARGET_VIEW_DESC(this.Format,this.ViewDimension,this.MipSlice,this.FirstArraySlice,this.ArraySize)}}class D3D11_SAMPLER_DESC{Filter;AddressU;AddressV;AddressW;MipLODBias;MaxAnisotropy;ComparisonFunc;BorderColor;MinLOD;MaxLOD;constructor(n,t,i,r,u,f,e,o,s,h){this.Filter=n;this.AddressU=t;this.AddressV=i;this.AddressW=r;this.MipLODBias=u;this.MaxAnisotropy=f;this.ComparisonFunc=e;this.BorderColor=o;this.MinLOD=s;this.MaxLOD=h}Copy(){return new D3D11_SAMPLER_DESC(this.Filter,this.AddressU,this.AddressV,this.AddressW,this.MipLODBias,this.MaxAnisotropy,this.ComparisonFunc,this.BorderColor,this.MinLOD,this.MaxLOD)}}class D3D11_SHADER_RESOURCE_VIEW_DESC{Format;ViewDimension;MostDetailedMip;MipLevels;FirstArraySlice;ArraySize;constructor(n,t,i=0,r=1,u=0,f=1){this.Format=n;this.ViewDimension=t;this.MostDetailedMip=i;this.MipLevels=r;this.FirstArraySlice=u;this.ArraySize=f}Copy(){return new D3D11_SHADER_RESOURCE_VIEW_DESC(this.Format,this.ViewDimension,this.MostDetailedMip,this.MipLevels,this.FirstArraySlice,this.ArraySize)}}class D3D11_TEXTURE1D_DESC{Width;MipLevels;ArraySize;Format;Usage;BindFlags;CPUAccessFlags;MiscFlags;constructor(n,t,i,r,u,f,e,o){this.Width=n;this.MipLevels=t;this.ArraySize=i;this.Format=r;this.Usage=u;this.BindFlags=f;this.CPUAccessFlags=e;this.MiscFlags=o}Copy(){return new D3D11_TEXTURE1D_DESC(this.Width,this.MipLevels,this.ArraySize,this.Format,this.Usage,this.BindFlags,this.CPUAccessFlags,this.MiscFlags)}}class D3D11_TEXTURE2D_DESC{Width;Height;MipLevels;ArraySize;Format;SampleDesc;Usage;BindFlags;CPUAccessFlags;MiscFlags;constructor(n,t,i,r,u,f,e,o,s,h){this.Width=n;this.Height=t;this.MipLevels=i;this.ArraySize=r;this.Format=u;this.SampleDesc=f.Copy();this.Usage=e;this.BindFlags=o;this.CPUAccessFlags=s;this.MiscFlags=h}Copy(){return new D3D11_TEXTURE2D_DESC(this.Width,this.Height,this.MipLevels,this.ArraySize,this.Format,this.SampleDesc.Copy(),this.Usage,this.BindFlags,this.CPUAccessFlags,this.MiscFlags)}}class D3D11_TEXTURE3D_DESC{Width;Height;Depth;MipLevels;Format;Usage;BindFlags;CPUAccessFlags;MiscFlags;constructor(n,t,i,r,u,f,e,o,s){this.Width=n;this.Height=t;this.Depth=i;this.MipLevels=r;this.Format=u;this.Usage=f;this.BindFlags=e;this.CPUAccessFlags=o;this.MiscFlags=s}Copy(){return new D3D11_TEXTURE3D_DESC(this.Width,this.Height,this.Depth,this.MipLevels,this.Format,this.Usage,this.BindFlags,this.CPUAccessFlags,this.MiscFlags)}}class DXGI_SAMPLE_DESC{Count;Quality;constructor(n=1,t=0){this.Count=n;this.Quality=t}Copy(){return new DXGI_SAMPLE_DESC(this.Count,this.Quality)}}class DXGI_SWAP_CHAIN_DESC{Width;Height;Format;constructor(n,t,i=DXGI_FORMAT_R8G8B8A8_UNORM){this.Width=n;this.Height=t;this.Format=i}Copy(){return new DXGI_SWAP_CHAIN_DESC(this.Width,this.Height,this.Format)}}class D3D11_VIEWPORT{TopLeftX;TopLeftY;Width;Height;MinDepth;MaxDepth;constructor(n,t,i,r,u,f){this.TopLeftX=n;this.TopLeftY=t;this.Width=i;this.Height=r;this.MinDepth=u;this.MaxDepth=f}}class D3D11_RECT{Left;Top;Right;Bottom;constructor(n,t,i,r){this.Left=n;this.Top=t;this.Right=i;this.Bottom=r}}class D3D11_BOX{Left;Top;Front;Right;Bottom;Back;constructor(n,t,i,r,u=0,f=1){this.Left=n;this.Top=t;this.Right=i;this.Bottom=r;this.Front=u;this.Back=f}IsEmpty(){return this.Right<=this.Left||this.Bottom<=this.Top||this.Back<=this.Front}}class IUnknown{#refCount;constructor(){if(new.target===IUnknown)throw new Error("Cannot instantiate IUnknown objects directly.");this.#refCount=0;this.AddRef()}GetRef(){return this.#refCount}AddRef(){return this.#refCount++,this.#refCount}Release(){return this.#refCount--,this.#CheckRef(),this.#refCount}#CheckRef(){if(this.#refCount<0)throw new Error("Object has been released and is no longer available");}}class ID3D11DeviceChild extends IUnknown{#device;constructor(n){if(super(),new.target===ID3D11DeviceChild)throw new Error("Cannot instantiate ID3D11DeviceChild objects directly.");this.#device=n;this.#device.AddRef()}Release(){return super.Release(),this.GetRef()<=0&&this.#device.Release(),this.GetRef()}GetDevice(){return this.#device.AddRef(),this.#device}}class ID3D11Device extends IUnknown{#gl;#immediateContext;#anisoExt;#floatTextureExt;#floatTextureFilterExt;#compressedTextureExt;#readbackFramebuffer;#backBufferFramebuffer;constructor(n){if(super(),new.target===ID3D11Device)throw new Error("Cannot instantiate ID3D11Device objects directly.  Use D3D11CreateDevice() or D3D11CreateDeviceAndSwapChain() instead.");this.#gl=n;this.#immediateContext=null;this.#readbackFramebuffer=this.#gl.createFramebuffer();this.#backBufferFramebuffer=this.#gl.createFramebuffer();this.#anisoExt=this.#gl.getExtension("EXT_texture_filter_anisotropic")||this.#gl.getExtension("MOZ_EXT_texture_filter_anisotropic")||this.#gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");this.#floatTextureExt=this.#gl.getExtension("EXT_color_buffer_float");this.#floatTextureFilterExt=this.#gl.getExtension("OES_texture_float_linear");this.#compressedTextureExt=this.#gl.getExtension("WEBGL_compressed_texture_s3tc");this.#gl.pixelStorei(this.#gl.UNPACK_FLIP_Y_WEBGL,!1)}Release(){super.Release();this.GetRef()<=0&&(this.#immediateContext.Release(),this.#gl.deleteFramebuffer(this.#readbackFramebuffer),this.#gl.deleteFramebuffer(this.#backBufferFramebuffer))}GetAdapter(){return this.#gl}CheckFeatureSupport(n){switch(n){case D3D11_JS_FEATURE_ANISOTROPIC_FILTER_SUPPORT:return this.#anisoExt;case D3D11_JS_FEATURE_FLOAT_TEXTURE_SUPPORT:return this.#floatTextureExt;case D3D11_JS_FEATURE_FLOAT_TEXTURE_FILTER_SUPPORT:return this.#floatTextureFilterExt;case D3D11_JS_FEATURE_COMPRESSED_TEXTURE_S3TC_SUPPORT:return this.#compressedTextureExt;default:return null}}GetBackBufferFramebuffer(){return this.#backBufferFramebuffer}GetImmediateContext(){return this.#immediateContext==null?this.#immediateContext=new(class extends ID3D11DeviceContext{})(this):this.#immediateContext.AddRef(),this.#immediateContext}CreateBuffer(n,t){this.#ValidateBufferDesc(n,t);this.#immediateContext!=null&&this.#immediateContext.DirtyPipeline();let f=this.#gl.createBuffer(),r=this.#gl.STATIC_DRAW;switch(n.Usage){case D3D11_USAGE_IMMUTABLE:r=this.#gl.STATIC_DRAW;break;case D3D11_USAGE_DYNAMIC:r=this.#gl.DYNAMIC_DRAW;break;case D3D11_USAGE_STAGING:r=this.#gl.DYNAMIC_READ;break;case D3D11_USAGE_DEFAULT:default:r=this.#gl.DYNAMIC_DRAW}let i,u;return n.BindFlags==D3D11_BIND_INDEX_BUFFER?(i=this.#gl.ELEMENT_ARRAY_BUFFER,u=this.#gl.getParameter(this.#gl.ELEMENT_ARRAY_BUFFER_BINDING)):n.BindFlags==D3D11_BIND_CONSTANT_BUFFER?(i=this.#gl.UNIFORM_BUFFER,u=this.#gl.getParameter(this.#gl.UNIFORM_BUFFER_BINDING)):(i=this.#gl.ARRAY_BUFFER,u=this.#gl.getParameter(this.#gl.ARRAY_BUFFER_BINDING)),this.#gl.bindBuffer(i,f),t==null?this.#gl.bufferData(i,n.ByteWidth,r):this.#gl.bufferData(i,t,r),this.#gl.bindBuffer(i,u),new(class extends ID3D11Buffer{})(this,n,i,f)}CreateDepthStencilState(n){if(n==null)throw new Error("Depth-Stencil description cannot be null");return this.#ValidateDepthStencilDesc(n),new(class extends ID3D11DepthStencilState{})(this,n)}CreateDepthStencilView(n,t){if(t==null){let i=null;if(n instanceof ID3D11Texture1D)i=D3D11_DSV_DIMENSION_TEXTURE1D;else if(n instanceof ID3D11Texture2D)i=D3D11_DSV_DIMENSION_TEXTURE2D;else throw new Error("Invalid resource type for DSV");let r=n.GetDesc();t=new D3D11_DEPTH_STENCIL_VIEW_DESC(r.Format,i,0,0,0,r.ArraySize)}return this.#ValidateDSVDesc(n,t),new(class extends ID3D11DepthStencilView{})(this,n,t)}CreateInputLayout(n){return this.#immediateContext!=null&&this.#immediateContext.DirtyPipeline(),new(class extends ID3D11InputLayout{})(this,n)}CreatePixelShader(n){this.#immediateContext!=null&&this.#immediateContext.DirtyPipeline();let t=new HLSL(n,ShaderTypePixel),i=this.#CompileGLShader(t.GetGLSL(),this.#gl.FRAGMENT_SHADER);return new(class extends ID3D11PixelShader{})(this,i,t)}CreateRasterizerState(n){if(n==null)throw new Error("Rasterizer description cannot be null");return this.#ValidateRasterizerDesc(n),new(class extends ID3D11RasterizerState{})(this,n)}CreateRenderTargetView(n,t){if(t==null){let i=null;if(n instanceof ID3D11Texture1D)i=D3D11_RTV_DIMENSION_TEXTURE1D;else if(n instanceof ID3D11Texture2D)i=D3D11_RTV_DIMENSION_TEXTURE2D;else if(n instanceof ID3D11Texture3D)i=D3D11_RTV_DIMENSION_TEXTURE3D;else throw new Error("Invalid resource type for RTV");let r=n.GetDesc();t=new D3D11_RENDER_TARGET_VIEW_DESC(r.Format,i,0,0,r.ArraySize)}this.#ValidateRTVDesc(n,t);let i=t.Copy();return(n.GetDesc().MiscFlags&D3D11_RESOURCE_MISC_TEXTURECUBE)==D3D11_RESOURCE_MISC_TEXTURECUBE&&(i.FirstArraySlice==2?i.FirstArraySlice=3:i.FirstArraySlice==3&&(i.FirstArraySlice=2)),new(class extends ID3D11RenderTargetView{})(this,n,i)}CreateSamplerState(n){if(n==null)throw new Error("Sampler description cannot be null");return this.#ValidateSamplerDesc(n),new(class extends ID3D11SamplerState{})(this,n)}CreateShaderResourceView(n,t){if(t==null){let i=n.GetDesc(),r=null;if(n instanceof ID3D11Texture1D)r=i.ArraySize>1?D3D11_SRV_DIMENSION_TEXTURE1DARRAY:D3D11_SRV_DIMENSION_TEXTURE1D;else if(n instanceof ID3D11Texture2D)r=i.MiscFlags&D3D11_RESOURCE_MISC_TEXTURECUBE!=0&&i.ArraySize==6?D3D11_SRV_DIMENSION_TEXTURECUBE:i.ArraySize>1?D3D11_SRV_DIMENSION_TEXTURE2DARRAY:D3D11_SRV_DIMENSION_TEXTURE2D;else if(n instanceof ID3D11Texture3D)r=D3D11_SRV_DIMENSION_TEXTURE3D;else throw new Error("Invalid resource type for SRV");t=new D3D11_SHADER_RESOURCE_VIEW_DESC(i.Format,r,0,i.MipLevels,0,i.ArraySize)}return this.#ValidateSRVDesc(n,t),new(class extends ID3D11ShaderResourceView{})(this,n,t)}CreateTexture1D(n,t){return this.#CreateTexture(1,n,t)}CreateTexture2D(n,t){return this.#CreateTexture(2,n,t)}CreateTexture3D(n,t){return this.#CreateTexture(3,n,t)}#CreateTexture(n,t,i){this.#immediateContext!=null&&this.#immediateContext.DirtyPipeline();this.#ValidateTextureDesc(n,t,i);const s=this.#gl.createTexture(),o=this.#GetFormatDetails(t.Format),c=o.InternalFormat,e=o.Format,h=o.Type,y=o.IsDepth,p=o.HasStencil,l=o.IsCompressed,v=t.MipLevels>1,r=this.#GetGLTextureType(n,t);this.#gl.bindTexture(r,s);let u=1,f=1,a=1;switch(n){case 3:a=t.Depth;case 2:f=t.Height;case 1:u=t.Width}switch(r){case this.#gl.TEXTURE_2D:case this.#gl.TEXTURE_CUBE_MAP:this.#gl.texStorage2D(r,t.MipLevels,c,u,f);break;case this.#gl.TEXTURE_2D_ARRAY:this.#gl.texStorage3D(r,t.MipLevels,c,u,f,t.ArraySize);break;case this.#gl.TEXTURE_3D:this.#gl.texStorage3D(r,t.MipLevels,c,u,f,a)}if(i!=null&&i.length>0)switch(r){case this.#gl.TEXTURE_2D:for(let n=0;n<t.MipLevels&&n<i.length;n++)if(i[n]!=null){const t=Math.pow(2,n),o=Math.max(1,Math.floor(u/t)),s=Math.max(1,Math.floor(f/t));this.#gl.texSubImage2D(r,n,0,0,o,s,e,h,i[n])}break;case this.#gl.TEXTURE_CUBE_MAP:const n=[this.#gl.TEXTURE_CUBE_MAP_POSITIVE_X,this.#gl.TEXTURE_CUBE_MAP_NEGATIVE_X,this.#gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,this.#gl.TEXTURE_CUBE_MAP_POSITIVE_Y,this.#gl.TEXTURE_CUBE_MAP_POSITIVE_Z,this.#gl.TEXTURE_CUBE_MAP_NEGATIVE_Z];for(let r=0;r<6;r++)for(let o=0;o<t.MipLevels&&o<i.length/6;o++)if(i[o+r*t.MipLevels]!=null){const s=Math.pow(2,o),c=Math.max(1,Math.floor(u/s)),a=Math.max(1,Math.floor(f/s));l?this.#gl.compressedTexSubImage2D(n[r],o,0,0,c,a,e,i[o+r*t.MipLevels]):this.#gl.texSubImage2D(n[r],o,0,0,c,a,e,h,i[o+r*t.MipLevels])}break;case this.#gl.TEXTURE_2D_ARRAY:for(let n=0;n<t.ArraySize;n++)for(let o=0;o<t.MipLevels&&o<i.length/t.ArraySize;o++)if(i[o+n*t.MipLevels]!=null){const s=Math.pow(2,o),c=Math.max(1,Math.floor(u/s)),a=Math.max(1,Math.floor(f/s));l?this.#gl.compressedTexSubImage3D(r,o,0,0,n,c,a,1,e,i[o+n*t.MipLevels]):this.#gl.texSubImage3D(r,o,0,0,n,c,a,1,e,h,i[o+n*t.MipLevels])}break;case this.#gl.TEXTURE_3D:for(let n=0;n<t.MipLevels&&n<i.length;n++)if(i[n]!=null){const o=Math.pow(2,n),s=Math.max(1,Math.floor(u/o)),c=Math.max(1,Math.floor(f/o)),v=Math.max(1,Math.floor(a/o));l?this.#gl.compressedTexSubImage3D(r,n,0,0,0,s,c,v,e,i[n+arraySlice*t.MipLevels]):this.#gl.texSubImage3D(r,n,0,0,0,s,c,v,e,h,i[n])}}this.#SetDefaultSamplerStateForBoundTexture(r,v);switch(n){case 1:return new(class extends ID3D11Texture1D{})(this,t,r,s);case 2:return new(class extends ID3D11Texture2D{})(this,t,r,s);case 3:return new(class extends ID3D11Texture3D{})(this,t,r,s);default:throw new Error("Invalid texture dimension");}}CreateVertexShader(n){this.#immediateContext!=null&&this.#immediateContext.DirtyPipeline();let t=new HLSL(n,ShaderTypeVertex),i=this.#CompileGLShader(t.GetGLSL(),this.#gl.VERTEX_SHADER);return new(class extends ID3D11VertexShader{})(this,i,t)}ReadFromSubresource(n,t,i,r=null){if(r==null||!r.IsEmpty())if(t instanceof ID3D11Texture2D){let u=t.GetDesc();if(u.Usage!=D3D11_USAGE_STAGING)throw new Error("Invalid usage on resource - can only read from staging resources");if((u.CPUAccessFlags&D3D11_CPU_ACCESS_READ)==0)throw new Error("Invalid CPU Access flag on resource - must be set for reading");let p=D3D11CalcSubresource(u.MipLevels-1,u.ArraySize-1,u.MipLevels);if(i<0||i>p)throw new Error("Invalid subresource index for reading");let f=Math.floor(i/u.MipLevels),e=i-f*u.MipLevels,o=Math.pow(2,e),w=Math.max(1,Math.floor(u.Width/o)),s=Math.max(1,Math.floor(u.Height/o)),h=0,c=0,l=w,a=s;r!=null&&(h=r.Left,c=s-r.Bottom,l=r.Right-r.Left,a=r.Bottom-r.Top);this.#immediateContext.DirtyPipeline();this.#gl.bindFramebuffer(this.#gl.READ_FRAMEBUFFER,this.#readbackFramebuffer);let v=(u.MiscFlags&D3D11_RESOURCE_MISC_TEXTURECUBE)==D3D11_RESOURCE_MISC_TEXTURECUBE,b=u.ArraySize>1;if(!b||v){let n=this.#gl.TEXTURE_2D;if(v)switch(f){case 0:n=this.#gl.TEXTURE_CUBE_MAP_POSITIVE_X;break;case 1:n=this.#gl.TEXTURE_CUBE_MAP_NEGATIVE_X;break;case 2:n=this.#gl.TEXTURE_CUBE_MAP_NEGATIVE_Y;break;case 3:n=this.#gl.TEXTURE_CUBE_MAP_POSITIVE_Y;break;case 4:n=this.#gl.TEXTURE_CUBE_MAP_POSITIVE_Z;break;case 5:n=this.#gl.TEXTURE_CUBE_MAP_NEGATIVE_Z;break;default:throw new Error("Invalid subresource for cube map reading");}this.#gl.framebufferTexture2D(this.#gl.READ_FRAMEBUFFER,this.#gl.COLOR_ATTACHMENT0,n,t.GetGLResource(),e)}else this.#gl.framebufferTextureLayer(this.#gl.READ_FRAMEBUFFER,this.#gl.COLOR_ATTACHMENT0,t.GetGLResource(),e,f);let y=this.#GetFormatDetails(u.Format);this.#gl.readPixels(h,c,l,a,y.Format,y.Type,n)}else if(t instanceof ID3D11Buffer)throw new Error("Reading from a buffer is not yet implemented!");else throw new Error("Given source resource is invalid or not yet implemented!");}#CompileGLShader(n,t){let i=this.#gl.createShader(t);this.#gl.shaderSource(i,n);this.#gl.compileShader(i);let r=this.#gl.getShaderParameter(i,this.#gl.COMPILE_STATUS);if(!r)throw new Error("Error compiling shader: "+this.#gl.getShaderInfoLog(i));return i}#GetGLTextureType(n,t){const r=t.ArraySize>1,i=(t.MiscFlags&D3D11_RESOURCE_MISC_TEXTURECUBE)==D3D11_RESOURCE_MISC_TEXTURECUBE;if(n==3)return this.#gl.TEXTURE_3D;if(n==2&&i)return this.#gl.TEXTURE_CUBE_MAP;if((n==1||n==2)&&!i)return r?this.#gl.TEXTURE_2D_ARRAY:this.#gl.TEXTURE_2D;throw new Error("Description does not match any known WebGL texture types");}#GetFormatDetails(n){let t={Type:null,Format:null,InternalFormat:null,IsDepth:!1,HasStencil:!1,IsCompressed:!1};switch(n){case DXGI_FORMAT_D16_UNORM:t.Type=this.#gl.UNSIGNED_SHORT;t.Format=this.#gl.DEPTH_COMPONENT;t.InternalFormat=this.#gl.DEPTH_COMPONENT16;t.IsDepth=!0;t.HasStencil=!1;break;case DXGI_FORMAT_D24_UNORM_S8_UINT:t.Type=this.#gl.UNSIGNED_INT_24_8;t.Format=this.#gl.DEPTH_STENCIL;t.InternalFormat=this.#gl.DEPTH24_STENCIL8;t.IsDepth=!0;t.HasStencil=!0;break;case DXGI_FORMAT_D32_FLOAT:t.Type=this.#gl.FLOAT;t.Format=this.#gl.DEPTH_COMPONENT;t.InternalFormat=this.#gl.DEPTH_COMPONENT32F;t.IsDepth=!0;t.HasStencil=!1;break;case DXGI_FORMAT_R8G8B8A8_UNORM:t.Type=this.#gl.UNSIGNED_BYTE;t.Format=this.#gl.RGBA;t.InternalFormat=this.#gl.RGBA8;break;case DXGI_FORMAT_R8G8B8A8_UNORM_SRGB:t.Type=this.#gl.UNSIGNED_BYTE;t.Format=this.#gl.RGBA;t.InternalFormat=this.#gl.SRGB8_ALPHA8;break;case DXGI_FORMAT_R16G16_FLOAT:t.Type=this.#gl.HALF_FLOAT;t.Format=this.#gl.RG;t.InternalFormat=this.#gl.RG16F;break;case DXGI_FORMAT_R16G16B16A16_FLOAT:t.Type=this.#gl.HALF_FLOAT;t.Format=this.#gl.RGBA;t.InternalFormat=this.#gl.RGBA16F;break;case DXGI_FORMAT_R32G32B32A32_FLOAT:t.Type=this.#gl.FLOAT;t.Format=this.#gl.RGBA;t.InternalFormat=this.#gl.RGBA32F;break;case DXGI_FORMAT_BC1_UNORM:if(this.#compressedTextureExt==null)throw new Error("DXT compressed texture formats not supported by your device");t.Format=this.#compressedTextureExt.COMPRESSED_RGBA_S3TC_DXT1_EXT;t.InternalFormat=this.#compressedTextureExt.COMPRESSED_RGBA_S3TC_DXT1_EXT;t.IsCompressed=!0;break;case DXGI_FORMAT_BC2_UNORM:if(this.#compressedTextureExt==null)throw new Error("DXT compressed texture formats not supported by your device");t.Format=this.#compressedTextureExt.COMPRESSED_RGBA_S3TC_DXT3_EXT;t.InternalFormat=this.#compressedTextureExt.COMPRESSED_RGBA_S3TC_DXT3_EXT;t.IsCompressed=!0;break;case DXGI_FORMAT_BC3_UNORM:if(this.#compressedTextureExt==null)throw new Error("DXT compressed texture formats not supported by your device");t.Format=this.#compressedTextureExt.COMPRESSED_RGBA_S3TC_DXT5_EXT;t.InternalFormat=this.#compressedTextureExt.COMPRESSED_RGBA_S3TC_DXT5_EXT;t.IsCompressed=!0;break;default:throw new Error("Format specified is not implemented yet!");}return t}#SetDefaultSamplerStateForBoundTexture(n,t){this.#gl.texParameteri(n,this.#gl.TEXTURE_MAG_FILTER,this.#gl.LINEAR);this.#gl.texParameteri(n,this.#gl.TEXTURE_MIN_FILTER,t?this.#gl.LINEAR_MIPMAP_LINEAR:this.#gl.LINEAR);this.#gl.texParameteri(n,this.#gl.TEXTURE_WRAP_S,this.#gl.CLAMP_TO_EDGE);this.#gl.texParameteri(n,this.#gl.TEXTURE_WRAP_T,this.#gl.CLAMP_TO_EDGE);this.#gl.texParameteri(n,this.#gl.TEXTURE_WRAP_R,this.#gl.CLAMP_TO_EDGE);this.#gl.texParameterf(n,this.#gl.TEXTURE_MIN_LOD,-D3D11_FLOAT32_MAX);this.#gl.texParameterf(n,this.#gl.TEXTURE_MAX_LOD,D3D11_FLOAT32_MAX);this.#gl.texParameteri(n,this.#gl.TEXTURE_COMPARE_MODE,this.#gl.NONE);this.#gl.texParameteri(n,this.#gl.TEXTURE_COMPARE_FUNC,this.#gl.NEVER);this.#anisoExt!=null&&this.#gl.texParameterf(n,this.#anisoExt.TEXTURE_MAX_ANISOTROPY_EXT,1)}#ValidateBufferDesc(n,t){let u=(n.BindFlags&D3D11_BIND_VERTEX_BUFFER)==D3D11_BIND_VERTEX_BUFFER,r=(n.BindFlags&D3D11_BIND_INDEX_BUFFER)==D3D11_BIND_INDEX_BUFFER,i=(n.BindFlags&D3D11_BIND_CONSTANT_BUFFER)==D3D11_BIND_CONSTANT_BUFFER,f=(n.BindFlags&D3D11_BIND_SHADER_RESOURCE)==D3D11_BIND_SHADER_RESOURCE,e=(n.BindFlags&D3D11_BIND_RENDER_TARGET)==D3D11_BIND_RENDER_TARGET,o=(n.BindFlags&D3D11_BIND_DEPTH_STENCIL)==D3D11_BIND_DEPTH_STENCIL;if(n.ByteWidth<=0)throw new Error("Invalid byte width for buffer description.  Must be greater than zero.");else if(i&&n.ByteWidth%16!=0)throw new Error("Invalid byte width for buffer description.  Constant buffer byte width must be a multiple of 16");if(this.#ValidateUsage(n,t),u||r||i||f||e||o){if(i&&n.BindFlags!=D3D11_BIND_CONSTANT_BUFFER)throw new Error("Constant Buffer bind flag cannot be combined with any other flags.");else if(r&&n.BindFlags!=D3D11_BIND_INDEX_BUFFER)throw new Error("Index Buffer bind flag cannot be combined with any other flags.");}else throw new Error("Invalid bind flag for buffer description.");if(n.CPUAccessFlags!=0&&n.CPUAccessFlags!=D3D11_CPU_ACCESS_READ&&n.CPUAccessFlags!=D3D11_CPU_ACCESS_WRITE)throw new Error("Invalid CPU Access Flags for buffer description.");if(n.CPUAccessFlags==D3D11_CPU_ACCESS_READ&&n.Usage!=D3D11_USAGE_STAGING)throw new Error("Invalid CPU Access in buffer description.  CPU Access Read can only be used with Staging usage.");if(n.CPUAccessFlags==D3D11_CPU_ACCESS_WRITE&&(n.Usage==D3D11_USAGE_DEFAULT||n.Usage==D3D11_USAGE_IMMUTABLE))throw new Error("Invalid CPU Access in buffer description.  CPU Access Write can only be used with Dynamic or Staging usage.");if(n.MiscFlags!=0)throw new Error("Invalid Misc Flags for buffer description.");if(n.StructureByteStride!=0)throw new Error("Invalid Structured Byte Stride for buffer description.");}#ValidateDepthStencilDesc(n){if(n.DepthWriteMask!=D3D11_DEPTH_WRITE_MASK_ALL&&n.DepthWriteMask!=D3D11_DEPTH_WRITE_MASK_ZERO)throw new Error("Invalid Depth Write Mask for depth stencil description");if(n.DepthFunc<D3D11_COMPARISON_NEVER||n.DepthFunc>D3D11_COMPARISON_ALWAYS)throw new Error("Invalid Depth Function for depth stencil description");if(n.StencilEnable)throw new Error("Stencil support not yet implemented!");}#ValidateDSVDesc(n,t){if(n==null)throw new Error("Resource cannot be null when creating a DSV");let i=n.GetDesc();if((i.BindFlags&D3D11_BIND_DEPTH_STENCIL)==0)throw new Error("Cannot create DSV: resource is not marked for depth/stencil binding");if(t.Format==DXGI_FORMAT_UNKNOWN)t.Format=i.Format;else if(t.Format!=i.Format)throw new Error("Specified DSV Format does not match resource");switch(t.Format){case DXGI_FORMAT_D16_UNORM:case DXGI_FORMAT_D32_FLOAT:case DXGI_FORMAT_D24_UNORM_S8_UINT:break;default:throw new Error("Specified DSV Format is invalid or not yet implemented!");}switch(t.ViewDimension){case D3D11_DSV_DIMENSION_TEXTURE2D:if(!(n instanceof ID3D11Texture2D))throw new Error("Specified DSV View Dimension does not match resource");break;case D3D11_DSV_DIMENSION_TEXTURE1D:if(!(n instanceof ID3D11Texture1D))throw new Error("Specified DSV View Dimension does not match resource");break;case D3D11_DSV_DIMENSION_TEXTURE1DARRAY:case D3D11_DSV_DIMENSION_TEXTURE2DARRAY:throw new Error("Specified DSV View Dimension is not yet implemented!");default:throw new Error("Specified DSV View Dimension is invalid");}switch(t.Flags){case 0:break;case D3D11_DSV_READ_ONLY_DEPTH:case D3D11_DSV_READ_ONLY_STENCIL:throw new Error("Specified DSV Flags not yet implemented!");default:throw new Error("Specified DSV Flags are invalid");}if(t.MipSlice<0||t.MipSlice>=i.MipLevels)throw new Error("Specified DSV Mip Slice is invalid");if(t.FirstArraySlice<0||t.FirstArraySlice>=i.ArraySize)throw new Error("Specified DSV First Array Slice is invalid");let r=t.FirstArraySlice+t.ArraySize-1;if(t.ArraySize==0||r<0||r>=i.ArraySize)throw new Error("Specified DSV Array Size is invalid");}#ValidateRasterizerDesc(n){switch(n.FillMode){case D3D11_FILL_SOLID:break;case D3D11_FILL_WIREFRAME:throw new Error("Wireframe fill mode not yet implemented!");default:throw new Error("Invalid Fill Mode for rasterizer description");}if(n.CullMode!=D3D11_CULL_NONE&&n.CullMode!=D3D11_CULL_FRONT&&n.CullMode!=D3D11_CULL_BACK)throw new Error("Invalid Cull Mode for rasterizer description");if(n.DepthBiasClamp!=0)throw new Error("Depth Bias Clamp unsupported in WebGL");if(!n.DepthClipEnable)throw new Error("Disabling Depth Clip unsupported in WebGL");if(n.MultisampleEnable)throw new Error("Multisampling not yet implemented");if(n.AntiasliasedLineEnable)throw new Error("Antialiased Lines not yet implemented");}#ValidateSamplerDesc(n){const i=n.Filter;if(i<0||i>D3D11_FILTER_COMPARISON_ANISOTROPIC||(i&2)==2||(i&8)==8||(i&32)==32)throw new Error("Invalid filter mode for sampler state");const r=n.AddressU,u=n.AddressV,f=n.AddressW;if(r<D3D11_TEXTURE_ADDRESS_WRAP||r>D3D11_TEXTURE_ADDRESS_MIRROR_ONCE)throw new Error("Invalid address U mode for sampler state");if(u<D3D11_TEXTURE_ADDRESS_WRAP||u>D3D11_TEXTURE_ADDRESS_MIRROR_ONCE)throw new Error("Invalid address V mode for sampler state");if(f<D3D11_TEXTURE_ADDRESS_WRAP||f>D3D11_TEXTURE_ADDRESS_MIRROR_ONCE)throw new Error("Invalid address W mode for sampler state");const e=D3D11_TEXTURE_ADDRESS_BORDER,o=D3D11_TEXTURE_ADDRESS_MIRROR_ONCE;if(r==e||u==e||f==e)throw new Error("Border address mode unsupported in WebGL");if(r==o||u==o||f==o)throw new Error("MirrorOnce address mode unsupported in WebGL");const s=(i&64)==64;if(this.#anisoExt&&s){const t=this.#gl.getParameter(this.#anisoExt.MAX_TEXTURE_MAX_ANISOTROPY_EXT);if(n.MaxAnisotropy<1||n.MaxAnisotropy>t)throw new Error(`Invalid MaxAnisotropy value for sampler state - range is [${1}, ${t}]`);}else if(s)throw new Error("Anisotropic filtering not available on this device");const h=n.ComparisonFunc;if((i&128)==128&&(h<D3D11_COMPARISON_NEVER||h>D3D11_COMPARISON_ALWAYS))throw new Error("Invalid comparison function for sampler state");const t=n.BorderColor;if((r==D3D11_TEXTURE_ADDRESS_BORDER||u==D3D11_TEXTURE_ADDRESS_BORDER||f==D3D11_TEXTURE_ADDRESS_BORDER)&&t[0]<0||t[0]>1||t[1]<0||t[1]>1||t[2]<0||t[2]>1||t[3]<0||t[3]>1)throw new Error("Invalid border color for sampler state");}#ValidateRTVDesc(n,t){if(n==null)throw new Error("Resource cannot be null when creating an RTV");let i=n.GetDesc();if((i.BindFlags&D3D11_BIND_RENDER_TARGET)==0)throw new Error("Cannot create RTV: resource is not marked for render target binding");if(t.Format==DXGI_FORMAT_UNKNOWN)t.Format=i.Format;else if(t.Format!=i.Format)throw new Error("Specified RTV Format does not match resource");switch(t.Format){case DXGI_FORMAT_R8G8B8A8_UNORM:case DXGI_FORMAT_R8G8B8A8_UNORM_SRGB:case DXGI_FORMAT_R16G16_FLOAT:case DXGI_FORMAT_R16G16B16A16_FLOAT:case DXGI_FORMAT_R32G32B32A32_FLOAT:break;default:throw new Error("Specified RTV Format is invalid or not yet implemented!");}switch(t.ViewDimension){case D3D11_RTV_DIMENSION_TEXTURE2D:case D3D11_RTV_DIMENSION_TEXTURE2DARRAY:if(!(n instanceof ID3D11Texture2D))throw new Error("Specified RTV View Dimension does not match resource");break;case D3D11_RTV_DIMENSION_TEXTURE1D:case D3D11_RTV_DIMENSION_TEXTURE1DARRAY:if(!(n instanceof ID3D11Texture1D))throw new Error("Specified RTV View Dimension does not match resource");break;case D3D11_RTV_DIMENSION_TEXTURE3D:if(!(n instanceof ID3D11Texture3D))throw new Error("Specified RTV View Dimension does not match resource");break;default:throw new Error("Specified RTV View Dimension is invalid");}if(t.MipSlice<0||t.MipSlice>=i.MipLevels)throw new Error("Specified RTV Mip Slice is invalid");if(t.FirstArraySlice<0||t.FirstArraySlice>=i.ArraySize)throw new Error("Specified RTV First Array Slice is invalid");let r=t.FirstArraySlice+t.ArraySize-1;if(t.ArraySize==0||r<0||r>=i.ArraySize)throw new Error("Specified RTV Array Size is invalid");}#ValidateSRVDesc(n,t){if(n==null)throw new Error("Resource cannot be null when creating an SRV");let i=n.GetDesc();if((i.BindFlags&D3D11_BIND_SHADER_RESOURCE)==0)throw new Error("Cannot create SRV: resource is not marked for shader resource binding");switch(t.Format){case DXGI_FORMAT_R8G8B8A8_UNORM:case DXGI_FORMAT_R8G8B8A8_UNORM_SRGB:case DXGI_FORMAT_R16G16_FLOAT:case DXGI_FORMAT_R16G16B16A16_FLOAT:case DXGI_FORMAT_R32G32B32A32_FLOAT:case DXGI_FORMAT_BC1_UNORM:case DXGI_FORMAT_BC2_UNORM:case DXGI_FORMAT_BC3_UNORM:break;default:throw new Error("Specified SRV Format is invalid or not yet implemented!");}if(t.Format!=i.Format)throw new Error("Specified SRV Format does not match resource");switch(t.ViewDimension){case D3D11_SRV_DIMENSION_TEXTURE2D:case D3D11_SRV_DIMENSION_TEXTURE2DARRAY:case D3D11_SRV_DIMENSION_TEXTURECUBE:if(!(n instanceof ID3D11Texture2D))throw new Error("Specified SRV View Dimension does not match resource");break;case D3D11_SRV_DIMENSION_TEXTURE1D:case D3D11_SRV_DIMENSION_TEXTURE1DARRAY:if(!(n instanceof ID3D11Texture1D))throw new Error("Specified SRV View Dimension does not match resource");break;case D3D11_SRV_DIMENSION_TEXTURE3D:if(!(n instanceof ID3D11Texture3D))throw new Error("Specified SRV View Dimension does not match resource");break;default:throw new Error("Specified SRV View Dimension is invalid");}if(t.MostDetailedMip<0||t.MostDetailedMip>=i.MipLevels)throw new Error("Specified SRV Most Detailed Mip is invalid");let r=t.MostDetailedMip+t.MipLevels-1;if(t.MipLevels==0||r<0||r>=i.MipLevels)throw new Error("Specified SRV Mip Levels value is invalid");if(t.FirstArraySlice<0||t.FirstArraySlice>=i.ArraySize)throw new Error("Specified SRV First Array Slice is invalid");let u=t.FirstArraySlice+t.ArraySize-1;if(t.ArraySize==0||u<0||u>=i.ArraySize)throw new Error("Specified SRV Array Size is invalid");}#ValidateTextureDesc(n,t,i){if(t==null)throw new Error("Description cannot be null when creating a texture");if(n<1||n>3)throw new Error("Invalid texture dimension");const o=this.#gl.getParameter(this.#gl.MAX_TEXTURE_SIZE),s=this.#gl.getParameter(this.#gl.MAX_3D_TEXTURE_SIZE),r=this.#gl.getParameter(this.#gl.MAX_CUBE_MAP_TEXTURE_SIZE),f=this.#gl.getParameter(this.#gl.MAX_ARRAY_TEXTURE_LAYERS),u=(t.MiscFlags&D3D11_RESOURCE_MISC_TEXTURECUBE)==D3D11_RESOURCE_MISC_TEXTURECUBE,h=(t.MiscFlags&D3D11_RESOURCE_MISC_GENERATE_MIPS)==D3D11_RESOURCE_MISC_GENERATE_MIPS;if(u&&n!=2)throw new Error("Only 2D textures may be used as cube maps");if(u){if(t.Width<=0||t.Width>r||t.Height<=0||t.Height>r)throw new Error(`Texture Cube dimensions must be between 1 and ${r}, inclusive`);}else{let i=n==3?s:o;switch(n){case 3:if(t.Depth<=0||t.Height>i)throw new Error(`Texture depth must be between 1 and ${i}, inclusive`);case 2:if(t.Height<=0||t.Height>i)throw new Error(`Texture height must be between 1 and ${i}, inclusive`);case 1:if(t.Width<=0||t.Width>i)throw new Error(`Texture width must be between 1 and ${i}, inclusive`);}}if(n==3&&Object.hasOwn(t,"ArraySize"))throw new Error("3D textures cannot have an array size");if(u&&t.ArraySize!=6)throw new Error("Invalid array size for texture cube - must be exactly 6");if(t.ArraySize<=0||t.ArraySize>f)throw new Error(`Array size must be greater than zero and less than or equal to ${f}`);const e=Math.log2(Math.max(t.Width,t.Height))+1;if(t.MipLevels==0&&(t.MipLevels=e),t.MipLevels<=0||t.MipLevels>e)throw new Error("Invalid mip levels specified for texture");switch(t.Format){case DXGI_FORMAT_D16_UNORM:case DXGI_FORMAT_D32_FLOAT:case DXGI_FORMAT_D24_UNORM_S8_UINT:break;case DXGI_FORMAT_R8G8B8A8_UNORM:case DXGI_FORMAT_R8G8B8A8_UNORM_SRGB:break;case DXGI_FORMAT_BC1_UNORM:case DXGI_FORMAT_BC2_UNORM:case DXGI_FORMAT_BC3_UNORM:if(this.#compressedTextureExt==null)throw new Error("DXT compressed texture formats not supported by your device");break;case DXGI_FORMAT_R16G16_FLOAT:case DXGI_FORMAT_R16G16B16A16_FLOAT:case DXGI_FORMAT_R32G32B32A32_FLOAT:if(this.#floatTextureExt==null)throw new Error("Floating point texture formats are unsupported on your device");break;default:throw new Error("Specified texture format is invalid or not yet implemented!");}this.#ValidateUsage(t,i);switch(t.BindFlags){case 0:case D3D11_BIND_SHADER_RESOURCE:case D3D11_BIND_RENDER_TARGET:case D3D11_BIND_DEPTH_STENCIL:case D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_RENDER_TARGET:case D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_DEPTH_STENCIL:break;default:throw new Error("Invalid bind flags specified");}if(h&&((t.BindFlags&D3D11_BIND_SHADER_RESOURCE)==0||(t.BindFlags&D3D11_BIND_RENDER_TARGET)==0))throw new Error("Resource must have SHADER_RESOURCE and RENDER_TARGET bind flags to generate mip maps");}#ValidateUsage(n,t){switch(n.Usage){case D3D11_USAGE_DEFAULT:break;case D3D11_USAGE_DYNAMIC:if((n.BindFlags&D3D11_BIND_DEPTH_STENCIL)==D3D11_BIND_DEPTH_STENCIL||(n.BindFlags&D3D11_BIND_RENDER_TARGET)==D3D11_BIND_RENDER_TARGET)throw new Error("Dynamic resources cannot be bound for output");if(n.BindFlags==0)throw new Error("Dynamic resources must have at least one Bind Flag");if(n.CPUAccessFlags!=D3D11_CPU_ACCESS_WRITE)throw new Error("Dynamic resources must have CPU Access Write");if(!(n instanceof D3D11_BUFFER_DESC))if(n.MipLevels!=1)throw new Error("Invalid mip levels - dynamic resources can only have a single subresource");else if(n.ArraySize!=1)throw new Error("Invalid array size - dynamic resources can only have a single subresource");break;case D3D11_USAGE_STAGING:if(n.BindFlags!=0)throw new Error("Staging resources cannot be bound to the pipeline and cannot have any bind flags set");if(n.CPUAccessFlags==0)throw new Error("Staging resources must have a CPU Access of either Read or Write.");break;case D3D11_USAGE_IMMUTABLE:if(t==null||t.length==0)throw new Error("Immutable textures must have initial data");if((n.BindFlags&D3D11_BIND_DEPTH_STENCIL)==D3D11_BIND_DEPTH_STENCIL||(n.BindFlags&D3D11_BIND_RENDER_TARGET)==D3D11_BIND_RENDER_TARGET)throw new Error("Immutable resources cannot be bound for output");break;default:throw new Error("Invalid usage specified");}}}class ID3D11DeviceContext extends ID3D11DeviceChild{#gl;#backBufferFramebuffer;#readbackFrameBuffer;#maxCombinedTextures;#shaderProgramMap;#currentShaderProgram;#currentCBufferMap;#currentTextureSamplerMap;#textureMipStatus;#shadersDirty;#inputAssemblerDirty;#inputLayout;#primitiveTopology

	#vertexBuffers{if(#vertexBufferStrides,#vertexBufferOffsets,#indexBuffer,#indexBufferFormat,#vertexShader,#maxVSTextures,#maxVSConstantBuffers,#vsConstantBuffers,#vsConstantBuffersDirty,#viewport,#scissorRect,#rasterizerState,#defaultRasterizerDesc,#rasterizerDirty,#viewportDirty,#scissorRectDirty,#pixelShader,#maxPSTextures,#maxPSConstantBuffers,#psConstantBuffers,#psConstantBuffersDirty,#psShaderResources,#psShaderResourcesDirty,#psSamplers,#psSamplersDirty,#renderTargetViews,#depthStencilView,#depthStencilState,#stencilRef,#defaultDepthStencilDesc,#outputMergerDirty,constructor(device),super(device),new.target===ID3D11DeviceContext){this.Release();throw new Error("Cannot instantiate ID3D11DeviceContext objects - use device.GetImmediateContext() or D3D11CreateDeviceAndSwapChain() instead");}this.#gl=device.GetAdapter();this.#gl.enable(this.#gl.CULL_FACE);this.#gl.frontFace(this.#gl.CW);this.#gl.enable(this.#gl.DEPTH_TEST);this.#backBufferFramebuffer=device.GetBackBufferFramebuffer();this.#readbackFrameBuffer=this.#gl.createFramebuffer();this.#shaderProgramMap=new Map;this.#maxCombinedTextures=this.#gl.getParameter(this.#gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);this.#textureMipStatus=Array(this.#maxCombinedTextures).fill(!1);this.#currentShaderProgram=null;this.#currentCBufferMap=null;this.#shadersDirty=!0;this.#inputAssemblerDirty=!0;this.#inputLayout=null;this.#primitiveTopology=D3D11_PRIMITIVE_TOPOLOGY_UNDEFINED;this.#vertexBuffers=[];this.#vertexBufferStrides=[];this.#vertexBufferOffsets=[];this.#indexBuffer=null;this.#indexBufferFormat=DXGI_FORMAT_R16_UINT;this.#vertexShader=null;this.#maxVSTextures=this.#gl.getParameter(this.#gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);this.#maxVSConstantBuffers=this.#gl.getParameter(this.#gl.MAX_VERTEX_UNIFORM_BLOCKS);this.#vsConstantBuffers=Array(this.#maxVSConstantBuffers).fill(null);this.#vsConstantBuffersDirty=!0;this.#viewport=null;this.#viewportDirty=!0;this.#scissorRect=new D3D11_RECT(0,0,0,0);this.#scissorRectDirty=!0;this.#rasterizerState=null;this.#rasterizerDirty=!0;this.#defaultRasterizerDesc=new D3D11_RASTERIZER_DESC(D3D11_FILL_SOLID,D3D11_CULL_BACK);this.#pixelShader=null;this.#maxPSTextures=this.#gl.getParameter(this.#gl.MAX_TEXTURE_IMAGE_UNITS);this.#maxPSConstantBuffers=this.#gl.getParameter(this.#gl.MAX_FRAGMENT_UNIFORM_BLOCKS);this.#psConstantBuffers=Array(this.#maxPSConstantBuffers).fill(null);this.#psShaderResources=Array(this.#maxPSTextures).fill(null);this.#psSamplers=Array(this.#maxPSTextures).fill(null);this.#psConstantBuffersDirty=!0;this.#psShaderResourcesDirty=!0;this.#psSamplersDirty=!0;this.#renderTargetViews=[];this.#depthStencilView=null;this.#depthStencilState=null;this.#stencilRef=0;this.#outputMergerDirty=!0;this.#defaultDepthStencilDesc=new D3D11_DEPTH_STENCIL_DESC;DirtyPipeline();this.#inputAssemblerDirty=!0;this.#shadersDirty=!0;this.#vsConstantBuffersDirty=!0;this.#rasterizerDirty=!0;this.#psConstantBuffersDirty=!0;this.#psShaderResourcesDirty=!0;this.#psSamplersDirty=!0;this.#outputMergerDirty=!0;ClearRenderTargetView(renderTargetView,color);{if(renderTargetView==null)throw new Error("Invalid RenderTargetView for clear");this.#BindBackBufferFramebuffer();this.#BindRenderTargets([renderTargetView]);let[n,t]=this.#GetActiveRenderTargetSize();this.#gl.scissor(0,0,n,t);this.#gl.clearColor(color[0],color[1],color[2],color[3]);this.#gl.clear(this.#gl.COLOR_BUFFER_BIT);this.#scissorRectDirty=!0}ClearDepthStencilView(depthStencilView,clearFlags,depth,stencil);{if(depthStencilView==null)throw new Error("Invalid DepthStencilView for clear");let t=clearFlags&D3D11_CLEAR_DEPTH==D3D11_CLEAR_DEPTH,i=clearFlags&D3D11_CLEAR_STENCIL==D3D11_CLEAR_STENCIL;if(!t&&!i)return;this.#BindBackBufferFramebuffer();this.#BindDepthStencil(depthStencilView);let[r,u]=this.#GetActiveRenderTargetSize();this.#gl.scissor(0,0,r,u);let n=0;t&&(this.#gl.clearDepth(depth),n|=this.#gl.DEPTH_BUFFER_BIT);i&&(this.#gl.clearStencil(stencil),n|=this.#gl.STENCIL_BUFFER_BIT);this.#gl.clear(n);this.#scissorRectDirty=!0}if(CopyResource(dstResource,srcResource),dstResource==srcResource)throw new Error("Cannot copy resource when destination and source are the same resource");if(dstResource instanceof ID3D11Buffer&&srcResource instanceof ID3D11Buffer)throw new Error("Buffer resource copying not yet implemented!");else if(dstResource instanceof ID3D11Texture2D&&srcResource instanceof ID3D11Texture2D){let n=srcResource.GetDesc(),t=dstResource.GetDesc();if(dstResource.Usage==D3D11_USAGE_IMMUTABLE)throw new Error("Cannot use an immutable resource as a copy destination");if(n.Width!=t.Width||n.Height!=t.Height||n.ArraySize!=t.ArraySize||n.MipLevels!=t.MipLevels)throw new Error("Source and destination resources do not match in size or subresource count");if(n.Format!=t.Format)throw new Error("Source and destination resources have different formats");for(let t=0;t<n.ArraySize;t++)for(let i=0;i<n.MipLevels;i++){let r=D3D11CalcSubresource(i,t,n.MipLevels);this.CopySubresourceRegion(dstResource,r,0,0,0,srcResource,r,null)}}else throw new Error("Resources being copied do not match or are not yet implemented!");CopySubresourceRegion(dstResource,dstSubresource,dstX,dstY,dstZ,srcResource,srcSubresource,srcBox=null);{if(srcBox!=null&&srcBox.IsEmpty())return;let t=srcResource.GetDesc(),n=dstResource.GetDesc();if(n.Usage==D3D11_USAGE_IMMUTABLE)throw new Error("Cannot copy into an immutable resource");if(this.#ValidateSubresourceIndex(t,srcSubresource),this.#ValidateSubresourceIndex(n,dstSubresource),srcResource==dstResource&&srcSubresource==dstSubresource)throw new Error("Cannot use the same subresource as both the source and destination of a copy");if(t.Format!=n.Format)throw new Error("Source and destination must have same format when copying");let i=srcResource instanceof ID3D11Buffer,r=dstResource instanceof ID3D11Buffer;if(i&&!r||r&&!i)throw new Error("Source and destination must be the same type (buffer or texture) when copying");if(srcResource instanceof ID3D11Texture2D){if(dstZ!=0)throw new Error("Invalid destination Z value for 2D textures - must be zero");if(srcBox!=null){let u=Math.floor(srcSubresource/t.MipLevels),i=srcSubresource-u*t.MipLevels,r=Math.pow(2,i),f=Math.max(1,Math.floor(n.Width/r)),e=Math.max(1,Math.floor(n.Height/r));if(srcBox.Left<0||srcBox.Right>f||srcBox.Top<0||srcBox.Bottom>e)throw new Error("Source box extends outside source resource dimensions for mip level "+i);}}else throw new Error("Given source resource is invalid or not yet implemented!");if(dstResource instanceof ID3D11Texture2D){let i=Math.floor(dstSubresource/n.MipLevels),u=dstSubresource-i*n.MipLevels,a=n.ArraySize>1,o=(n.MiscFlags&D3D11_RESOURCE_MISC_TEXTURECUBE)==D3D11_RESOURCE_MISC_TEXTURECUBE,c=Math.pow(2,u),l=Math.max(1,Math.floor(n.Width/c)),f=Math.max(1,Math.floor(n.Height/c)),s=0,h=0,e=l,r=f;if(srcBox!=null){s=srcBox.Left;h=f-srcBox.Bottom;e=srcBox.Right-srcBox.Left;r=srcBox.Bottom-srcBox.Top;let n=dstY+r;dstY=f-n}if(dstX<0||dstY<0||dstX+e>l||dstY+r>f)throw new Error("Destination offset extends outside destination resource dimensions for mip level "+u);if(o&&(i<0||i>=6))throw new Error("Invalid subresource for cube map copying");if(this.#BindSubresourceAsReadFramebuffer(srcResource,t,srcSubresource),this.#outputMergerDirty=!0,!a||o){let n=this.#gl.TEXTURE_2D;if(o){switch(i){case 0:n=this.#gl.TEXTURE_CUBE_MAP_POSITIVE_X;break;case 1:n=this.#gl.TEXTURE_CUBE_MAP_NEGATIVE_X;break;case 2:n=this.#gl.TEXTURE_CUBE_MAP_NEGATIVE_Y;break;case 3:n=this.#gl.TEXTURE_CUBE_MAP_POSITIVE_Y;break;case 4:n=this.#gl.TEXTURE_CUBE_MAP_POSITIVE_Z;break;case 5:n=this.#gl.TEXTURE_CUBE_MAP_NEGATIVE_Z}this.#gl.bindTexture(this.#gl.TEXTURE_CUBE_MAP,dstResource.GetGLResource())}else this.#gl.bindTexture(this.#gl.TEXTURE_2D,dstResource.GetGLResource());this.#gl.copyTexSubImage2D(n,u,dstX,dstY,s,h,e,r)}else this.#gl.bindTexture(this.#gl.TEXTURE_2D_ARRAY,dstResource.GetGLResource()),this.#gl.copyTexSubImage3D(this.#gl.TEXTURE_2D_ARRAY,u,dstX,dstY,i,s,h,e,r)}else throw new Error("Given destination resource is invalid or not yet implemented!");}#ValidateSubresourceIndex(resourceDesc,subresourceIndex);{let n=D3D11CalcSubresource(resourceDesc.MipLevels-1,resourceDesc.ArraySize-1,resourceDesc.MipLevels);if(subresourceIndex<0||subresourceIndex>n)throw new Error("Invalid subresource index");}#BindSubresourceAsReadFramebuffer(resource,desc,subresource);{this.#gl.bindFramebuffer(this.#gl.READ_FRAMEBUFFER,this.#readbackFrameBuffer);let n=Math.floor(subresource/desc.MipLevels),t=subresource-n*desc.MipLevels,i=(desc.MiscFlags&D3D11_RESOURCE_MISC_TEXTURECUBE)==D3D11_RESOURCE_MISC_TEXTURECUBE,r=desc.ArraySize>1;if(!r||i){let r=this.#gl.TEXTURE_2D;if(i)switch(n){case 0:r=this.#gl.TEXTURE_CUBE_MAP_POSITIVE_X;break;case 1:r=this.#gl.TEXTURE_CUBE_MAP_NEGATIVE_X;break;case 2:r=this.#gl.TEXTURE_CUBE_MAP_NEGATIVE_Y;break;case 3:r=this.#gl.TEXTURE_CUBE_MAP_POSITIVE_Y;break;case 4:r=this.#gl.TEXTURE_CUBE_MAP_POSITIVE_Z;break;case 5:r=this.#gl.TEXTURE_CUBE_MAP_NEGATIVE_Z;break;default:throw new Error("Invalid subresource for cube map reading");}this.#gl.framebufferTexture2D(this.#gl.READ_FRAMEBUFFER,this.#gl.COLOR_ATTACHMENT0,r,resource.GetGLResource(),t)}else this.#gl.framebufferTextureLayer(this.#gl.READ_FRAMEBUFFER,this.#gl.COLOR_ATTACHMENT0,resource.GetGLResource(),t,n)}GenerateMips(shaderResourceView);{let n=shaderResourceView.GetResource(),i=n.GetDesc();if((i.MiscFlags&D3D11_RESOURCE_MISC_GENERATE_MIPS)==0){n.Release();return}let t=n.GetGLTarget();this.#gl.bindTexture(t,n.GetGLResource());this.#gl.generateMipmap(t);this.DirtyPipeline();n.Release()}IASetInputLayout(inputLayout);this.#inputLayout=inputLayout;this.#inputAssemblerDirty=!0;IASetIndexBuffer(indexBuffer,format);this.#indexBuffer=indexBuffer;this.#indexBufferFormat=format;indexBuffer==null?this.#gl.bindBuffer(this.#gl.ELEMENT_ARRAY_BUFFER,null):this.#gl.bindBuffer(this.#gl.ELEMENT_ARRAY_BUFFER,this.#indexBuffer.GetGLResource());this.#inputAssemblerDirty=!0;IASetPrimitiveTopology(topology);this.#primitiveTopology=topology;IASetVertexBuffers(startSlot,buffers,strides,offsets);this.#vertexBuffers=[];this.#vertexBufferStrides=[];this.#vertexBufferOffsets=[];for(let n=0;n<buffers.length;n++)this.#vertexBuffers[startSlot+n]=buffers[n],this.#vertexBufferStrides[startSlot+n]=strides[n],this.#vertexBufferOffsets[startSlot+n]=offsets[n];if(this.#inputAssemblerDirty=!0,VSSetShader(vertexShader),this.#vertexShader=vertexShader,this.#shadersDirty=!0,VSSetConstantBuffers(startSlot,constantBuffers),startSlot+constantBuffers.length<0||startSlot+constantBuffers.length>=this.#maxVSConstantBuffers)throw new Error("Attempting to set VS constant buffers outside valid range");for(let n=0;n<constantBuffers.length;n++)this.#vsConstantBuffers[n+startSlot]=constantBuffers[n];return(this.#vsConstantBuffersDirty=!0,RSGetState(),this.#rasterizerState==null)?null:(this.#rasterizerState.AddRef(),this.#rasterizerState)}class IDXGISwapChain extends IUnknown{if(#desc,#device,#gl,#backBuffer,#backBufferFramebuffer,constructor(device,desc),super(),new.target===IDXGISwapChain)throw new Error("Cannot instantiate IDXGISwapChain objects directly.  Use DXGICreateSwapChain() or D3D11CreateDeviceAndSwapChain() instead.");if(this.#desc=desc.Copy(),this.#device=device,this.#gl=device.GetAdapter(),this.#desc.Width<=0)throw new Error("Swap Chain width must be greater than zero");if(this.#desc.Height<=0)throw new Error("Swap Chain height must be greater than zero");if(this.#desc.Format!=DXGI_FORMAT_R8G8B8A8_UNORM&&this.#desc.Format!=DXGI_FORMAT_R8G8B8A8_UNORM_SRGB)throw new Error("Invalid Swap Chain format");return this.#gl.canvas.width=this.#gl.canvas.clientWidth,this.#gl.canvas.height=this.#gl.canvas.clientHeight,this.#CreateBackBuffer(),this.#backBufferFramebuffer=device.GetBackBufferFramebuffer(),GetDesc(),structuredClone(this.#desc)}class ID3D11DepthStencilState extends ID3D11DeviceChild{if(#desc,constructor(device,desc),super(device),new.target===ID3D11DepthStencilState){device.Release();throw new Error("Cannot instantiate ID3D11DepthStencilState objects - use device.CreateDepthStencilState() instead");}return this.#desc=desc.Copy(),GetDesc(),this.#desc.Copy()}class ID3D11InputLayout extends ID3D11DeviceChild{if(#inputElementDescs,constructor(device,inputElementDescs),super(device),new.target===ID3D11InputLayout){device.Release();throw new Error("Cannot instantiate ID3D11InputLayout objects - use device.CreateInputLayout() instead");}this.#inputElementDescs=this.#CopyDescriptions(inputElementDescs);#CopyDescriptions(descriptionArray);{let n=[];for(let t=0;t<descriptionArray.length;t++)n[t]=descriptionArray[t].Copy();return n}return GetInputElementDescs(),this.#CopyDescriptions(this.#inputElementDescs)}class ID3D11PixelShader extends ID3D11DeviceChild{if(#glShader,#hlsl,constructor(device,glShader,hlsl),super(device),new.target===ID3D11PixelShader){device.Release();throw new Error("Cannot instantiate ID3D11PixelShader objects - use device.CreatePixelShader() instead");}return this.#glShader=glShader,this.#hlsl=hlsl,GetGLShader(),this.#glShader}class ID3D11RasterizerState extends ID3D11DeviceChild{if(#desc,constructor(device,desc),super(device),new.target===ID3D11RasterizerState){device.Release();throw new Error("Cannot instantiate ID3D11RasterizerState objects - use device.CreateRasterizerState() instead");}return this.#desc=desc.Copy(),GetDesc(),this.#desc.Copy()}class ID3D11SamplerState extends ID3D11DeviceChild{#desc;#glSamplerNoMips;#glSamplerWithMips;constructor(device,desc);{if(super(device),new.target===ID3D11SamplerState){device.Release();throw new Error("Cannot instantiate ID3D11SamplerState objects - use device.CreateSamplerState() instead");}this.#desc=desc.Copy();let n=device.GetAdapter();this.#glSamplerNoMips=n.createSampler();this.#glSamplerWithMips=n.createSampler();this.#InitializeGLSampler(device,this.#glSamplerNoMips,desc,!1);this.#InitializeGLSampler(device,this.#glSamplerWithMips,desc,!0)}return GetDesc(),this.#desc.Copy()}class ID3D11VertexShader extends ID3D11DeviceChild{if(#glShader,#hlsl,constructor(device,glShader,hlsl),super(device),new.target===ID3D11VertexShader){device.Release();throw new Error("Cannot instantiate ID3D11VertexShader objects - use device.CreateVertexShader() instead");}return this.#glShader=glShader,this.#hlsl=hlsl,GetGLShader(),this.#glShader}class ID3D11Resource extends ID3D11DeviceChild{if(#desc,#glTarget,#glResource,constructor(device,desc,glTarget,glResource),super(device),new.target===ID3D11Buffer){this.Release();throw new Error("Cannot instantiate ID3D11Resource objects - use corresponding Create() functions of an ID3D11Device object instead");}return this.#desc=desc.Copy(),this.#glTarget=glTarget,this.#glResource=glResource,GetDesc(),this.#desc.Copy()}class ID3D11Buffer extends ID3D11Resource{if(constructor(device,desc,glTarget,glBuffer),super(device,desc,glTarget,glBuffer),new.target===ID3D11Buffer){this.Release();throw new Error("Cannot instantiate ID3D11Buffer objects - use device.CreateBuffer() instead");}if(Release(),super.Release(),this.GetRef()<=0){let n=this.GetDevice();n.GetAdapter().deleteBuffer(this.GetGLResource());n.Release()}}class ID3D11Texture1D extends ID3D11Resource{if(constructor(device,desc,glTarget,glTexture),super(device,desc,glTarget,glTexture),new.target===ID3D11Texture1D){this.Release();throw new Error("Cannot instantiate ID3D11Texture1D objects - use device.CreateTexture1D() instead");}if(Release(),super.Release(),this.GetRef()<=0){let n=this.GetDevice();n.GetAdapter().deleteTexture(this.GetGLResource());n.Release()}}class ID3D11Texture2D extends ID3D11Resource{if(constructor(device,desc,glTarget,glTexture),super(device,desc,glTarget,glTexture),new.target===ID3D11Texture2D){this.Release();throw new Error("Cannot instantiate ID3D11Texture2D objects - use device.CreateTexture2D() instead");}if(Release(),super.Release(),this.GetRef()<=0){let n=this.GetDevice();n.GetAdapter().deleteTexture(this.GetGLResource());n.Release()}}class ID3D11Texture3D extends ID3D11Resource{if(constructor(device,desc,glTarget,glTexture),super(device,desc,glTarget,glTexture),new.target===ID3D11Texture3D){this.Release();throw new Error("Cannot instantiate ID3D11Texture3D objects - use device.CreateTexture3D() instead");}if(Release(),super.Release(),this.GetRef()<=0){let n=this.GetDevice();n.GetAdapter().deleteTexture(this.GetGLResource());n.Release()}}class ID3D11View extends ID3D11DeviceChild{if(#resource,#desc,constructor(device,resource,desc),super(device),new.target===ID3D11View){device.Release();throw new Error("Cannot instantiate ID3D11View objects - use corresponding Create___View() functions of an ID3D11Device object instead");}return this.#resource=resource,this.#desc=desc.Copy(),this.#resource.AddRef(),GetDesc(),this.#desc.Copy()}class ID3D11DepthStencilView extends ID3D11View{if(constructor(device,resource,desc),super(device,resource,desc),new.target===ID3D11DepthStencilView){device.Release();throw new Error("Cannot instantiate ID3D11DepthStencilView objects - use device.CreateDepthStencilView() instead");}}class ID3D11RenderTargetView extends ID3D11View{if(constructor(device,resource,desc),super(device,resource,desc),new.target===ID3D11RenderTargetView){device.Release();throw new Error("Cannot instantiate ID3D11RenderTargetView objects - use device.CreateRenderTargetView() instead");}}class ID3D11ShaderResourceView extends ID3D11View{if(constructor(device,resource,desc),super(device,resource,desc),new.target===ID3D11ShaderResourceView){device.Release();throw new Error("Cannot instantiate ID3D11ShaderResourceView objects - use device.CreateShaderResourceView() instead");}}const TokenUnknown = 0{const ct=1,lt=2,at=3,b=4,t=5,vt=6,yt=7,k=8,c=9,i=10,l=11,e=12,o=13,r=14,d=15,g=16,y=0,a=1,pt="_attrib_",p="_vary_",nt="_vs_output_",rt="_ps_output_",ut="_vs_",ft="_ps_",et="_sv_target_",h=0,u=1,ot={"void":"void",bool:"bool",bool2:"bvec2",bool3:"bvec3",bool4:"bvec4",int:"int",int2:"ivec2",int3:"ivec3",int4:"ivec4",uint:"uint",uint2:"uvec2",uint3:"uvec3",uint4:"uvec4",dword:"uint",dword2:"uvec2",dword3:"uvec3",dword4:"uvec4",half:"float",half2:"vec2",half3:"vec3",half4:"vec4",float:"float",float2:"vec2",float3:"vec3",float4:"vec4",double:"float",double2:"vec2",double3:"vec3",double4:"vec4",float2x2:"mat2x2",float2x3:"mat2x3",float2x4:"mat2x4",float3x2:"mat3x2",float3x3:"mat3x3",float3x4:"mat3x4",float4x2:"mat4x2",float4x3:"mat4x3",float4x4:"mat4x4",matrix:"mat4x4"},wt={_m00:"[0][0]",_m01:"[1][0]",_m02:"[2][0]",_m03:"[3][0]",_m10:"[0][1]",_m11:"[1][1]",_m12:"[2][1]",_m13:"[3][1]",_m20:"[0][2]",_m21:"[1][2]",_m22:"[2][2]",_m23:"[3][2]",_m30:"[0][3]",_m31:"[1][3]",_m32:"[2][3]",_m33:"[3][3]",_11:"[0][0]",_12:"[1][0]",_13:"[2][0]",_14:"[3][0]",_21:"[0][1]",_22:"[1][1]",_23:"[2][1]",_24:"[3][1]",_31:"[0][2]",_32:"[1][2]",_33:"[2][2]",_34:"[3][2]",_41:"[0][3]",_42:"[1][3]",_43:"[2][3]",_44:"[3][3]"},bt={float2x2:"float2x2_tr",float3x3:"float3x3_tr",float4x4:"float4x4_tr",matrix:"float4x4_tr"},st={$Global:"_global_cbuffer",input:"_input",output:"_output",pow:"pow_hlsl"},kt={Sample:"texture",SampleLevel:"textureLod"};class ii{#tokens;#position;constructor(n){this.#tokens=n;this.#position=-1}MoveNext(){return this.#position++,this.#position<this.#tokens.length}Current(){return this.#position>=this.#tokens.length?null:this.#tokens[this.#position]}More(){return this.#position<this.#tokens.length-1}Position(){return this.#position}GetRange(n,t){if(n<0||t>=this.#tokens.length+1||t<=n)throw new Error("Invalid range for token iterator");return this.#tokens.slice(n,t)}PeekPrev(){return this.#Peek(-1)}PeekNext(){return this.#Peek(1)}PeekNextNext(){return this.#Peek(2)}#Peek(n){let t=this.#position+n;return t<0||t>=this.#tokens.length?null:this.#tokens[t]}}class n{#hlsl;#shaderType;#tokens;#structs;#cbuffers;#textures;#samplers;#textureSamplerCombinations;#functions;#globalConstants;#main;Rules=[{Type:ct,Pattern:/^\s+/},{Type:lt,Pattern:/^\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\//},{Type:at,Pattern:/^\/\/.*/},{Type:b,Pattern:/^((<<=)|(>>=))/},{Type:b,Pattern:/^((\+=)|(-=)|(\*=)|(\/=)|(%=)|(<<)|(>>)|(&=)|(\|=)|(\^=)|(&&)|(\|\|)|(==)|(!=)|(<=)|(>=)|(\+\+)|(--))/},{Type:b,Pattern:/^[\+\-\*\/\%\=\~\&\|\^\?\<\>\!]/},{Type:t,Pattern:/^[_A-Za-z][_A-Za-z0-9]*/},{Type:vt,Pattern:/^[+-]?(([0][x][a-fA-F0-9]+([uU][lL])?([lL][uU])?[uU]?[lL]?)|(([0-9]*[.][0-9]+([eE][+-]?[0-9]+)?[fFlLhH]?)|([0-9]+[.]([eE][+-]?[0-9]+)?[fFlLhH])|([0-9]+[.])|([0-9]+([uU][lL])?([lL][uU])?[uU]?[lL]?)))/},{Type:l,Pattern:/^[{]/},{Type:e,Pattern:/^[}]/},{Type:o,Pattern:/^[(]/},{Type:r,Pattern:/^[)]/},{Type:d,Pattern:/^[\[]/},{Type:g,Pattern:/^[\]]/},{Type:i,Pattern:/^[;]/},{Type:c,Pattern:/^[:]/},{Type:k,Pattern:/^[,]/},{Type:yt,Pattern:/^[\.]/},{Type:TokenUnknown,Pattern:/^./}];static TranslateToGLSL(n){return ot.hasOwnProperty(n)?ot[n]:st.hasOwnProperty(n)?st[n]:n}static async LoadTextFromURL(n,t=true){let r=await fetch(n),i=await r.text();if(!t)return i;let u={},f="#include";for(;;){let e=i.indexOf(f);if(e==-1)break;let n=-1,t=-1;if(n=i.indexOf('"',e+f.length),n==-1)throw new Error("Error with #include; expected start quote");if(t=i.indexOf('"',n+1),t==-1)throw new Error("Error with #include; expected end quote");let o=i.substring(n+1,t),s="";u.hasOwnProperty(o)||(u[o]=!0,r=await fetch(o),s=await r.text());i=i.substring(0,e)+s+i.substring(t+1)}return i}constructor(n,t){if(t!=y&&t!=a)throw new Error("Invalid shader type specified");this.#hlsl=n.repeat(1);this.#shaderType=t;this.#Tokenize();this.#Parse()}GetCBuffers(){return this.#cbuffers.slice()}GetTextureSamplerCombinations(){return this.#textureSamplerCombinations.slice()}#Tokenize(){this.#tokens=[];let t=1,n=this.#hlsl.repeat(1);while(n.length>0){let i=!1;for(let r=0;r<this.Rules.length;r++){const f=new RegExp(this.Rules[r].Pattern,"g"),u=f.exec(n);if(u!=null){if(i=!0,t+=(u[0].match(/\n/g)||[]).length,this.Rules[r].Type!=lt&&this.Rules[r].Type!=at&&this.Rules[r].Type!=ct){let n={Type:this.Rules[r].Type,Text:u[0],Line:t};this.#tokens.push(n)}n=n.substring(f.lastIndex);break}}if(i==!1){alert("problem");break}}}#Parse(){this.#structs=[];this.#cbuffers=[];this.#textures=[];this.#samplers=[];this.#textureSamplerCombinations=[];this.#functions=[];this.#globalConstants=[];this.#main=null;let n=new ii(this.#tokens),i="";switch(this.#shaderType){case a:i=ft;break;case y:i=ut}let r=new dt("$Global",i+"global_cbuffer",-1);for(n.MoveNext();n.More();){let i=n.Current();switch(i.Text){case"const":this.#globalConstants.push(this.#ParseVarDec(n));break;case";":n.MoveNext();break;case"struct":this.#structs.push(this.#ParseStruct(n));break;case"cbuffer":this.#cbuffers.push(this.#ParseCBuffer(n));break;case"SamplerState":case"SamplerComparisonState":this.#samplers.push(this.#ParseSampler(n));break;case"Texture1D":case"Texture1DArray":case"Texture2D":case"Texture2DArray":case"TextureCube":case"TextureCubeArray":case"Texture3D":this.#textures.push(this.#ParseTexture(n));break;case"Texture2DMS":case"Texture2DMSArray":throw new Error("Not currently handling multisampled textures");default:if(!this.#IsDataType(i.Text)||n.PeekNext().Type!=t)throw new Error("Invalid token in HLSL file on line "+i.Line+": "+i.Text);if(!this.#ParseGlobalVarOrFunction(n,r))throw new Error("Error parsing global variable or function");}}if(this.#main==null)throw new Error("No main function found");r.Members.length>0&&this.#cbuffers.push(r);this.#ResolveImplicitRegisters(this.#cbuffers,999);this.#ResolveImplicitRegisters(this.#samplers,999);this.#ResolveImplicitRegisters(this.#textures,999)}#Allow(n,...t){for(const i of t)if(n.Current().Type==i)return n.MoveNext(),!0;return!1}#AllowIdentifier(n,...i){for(const r of i)if(n.Current().Type==t&&n.Current().Text==r)return n.MoveNext(),!0;return!1}#AllowOperator(n,...t){for(const i of t)if(n.Current().Type==b&&n.Current().Text==i)return n.MoveNext(),!0;return!1}#AllowDataType(n){let t=n.Current();return this.#IsDataType(t.Text)?(n.MoveNext(),!0):!1}#Require(n,t){if(this.#Allow(n,t))return!0;throw new Error("Error parsing HLSL on line "+n.Current().Line);}#RequireOperator(n,t){if(this.#AllowOperator(n,t))return!0;throw new Error("Error parsing HLSL on line "+n.Current().Line);}#RequireIdentifier(n,t){if(this.#AllowIdentifier(n,t))return!0;throw new Error("Error parsing HLSL on line "+n.Current().Line);}#RequireDataType(n){let t=n.Current();if(this.#IsDataType(t.Text))return n.MoveNext(),!0;throw new Error("Error parsing HLSL on line "+n.Current().Line);}#IsStruct(n){for(let t=0;t<this.#structs.length;t++)if(this.#structs[t].Name==n)return!0;return!1}#IsTexture(n){for(let t=0;t<this.#textures.length;t++)if(this.#textures[t].Name==n)return!0;return!1}#GetTexture(n){for(let t=0;t<this.#textures.length;t++)if(this.#textures[t].Name==n)return this.#textures[t];return null}#IsSampler(n){for(let t=0;t<this.#samplers.length;t++)if(this.#samplers[t].Name==n)return!0;return!1}#GetSampler(n){for(let t=0;t<this.#samplers.length;t++)if(this.#samplers[t].Name==n)return this.#samplers[t];return null}#IsDataType(n){let t=this.#IsStruct(n),i=ot.hasOwnProperty(n);return t||i}#IsReservedWord(n){return st.hasOwnProperty(n)}#ParseStruct(n){let r=null,u=[];this.#RequireIdentifier(n,"struct");this.#Require(n,t);r=n.PeekPrev().Text;this.#Require(n,l);do{if(n.Current().Type==e)break;u.push(this.#ParseMemberVariableOrFunctionParam(n,!1,!0,!0,!1))}while(this.#Allow(n,i));return this.#Require(n,e),this.#Require(n,i),new fi(r,u)}#ParseRegisterIndex(n,i){if(!this.#Allow(n,c))return-1;this.#RequireIdentifier(n,"register");this.#Require(n,o);this.#Require(n,t);let u=n.PeekPrev().Text;if(!u.startsWith(i))throw new Error("Invalid register type");let f=parseInt(u.substring(1));if(isNaN(f))throw new Error("Invalid register index");return this.#Require(n,r),f}#ParseCBuffer(r){let u=null,o=-1,s=[];this.#RequireIdentifier(r,"cbuffer");this.#Require(r,t);u=r.PeekPrev().Text;o=this.#ParseRegisterIndex(r,"b");this.#Require(r,l);do{if(r.Current().Type==e)break;s.push(this.#ParseMemberVariableOrFunctionParam(r,!1,!1,!1,!1))}while(this.#Allow(r,i));this.#Require(r,e);let f="";switch(this.#shaderType){case a:f=ft;break;case y:f=ut}let h=n.TranslateToGLSL(f+u);return new dt(u,h,o,s)}#ParseMemberVariableOrFunctionParam(n,i,r,u,f){let s=[],o=[],h=null,l=null,a=null,v=null,y=null,e=!1;do e=!1,this.#AllowIdentifier(n,"in")&&(o.push("in"),e=!0),this.#AllowIdentifier(n,"inout")&&(o.push("inout"),e=!0),this.#AllowIdentifier(n,"out")&&(o.push("out"),e=!0),this.#AllowIdentifier(n,"uniform")&&(o.push("uniform"),e=!0),this.#AllowIdentifier(n,"linear")&&(s.push("linear"),e=!0),this.#AllowIdentifier(n,"centroid")&&(s.push("centroid"),e=!0),this.#AllowIdentifier(n,"nointerpolation")&&(s.push("nointerpolation"),e=!0),this.#AllowIdentifier(n,"noperspective")&&(s.push("noperspective"),e=!0),this.#AllowIdentifier(n,"sample")&&(s.push("sample"),e=!0);while(e);if(!i&&o.length>0)throw new Error("Input modifier not allowed here");if(o.length>1)throw new Error("Multiple input modifiers found.");if(!r&&s.length>0)throw new Error("Interpolation modifier not allowed here");if(this.#RequireDataType(n),h=n.PeekPrev().Text,this.#Require(n,t),l=n.PeekPrev().Text,this.#Allow(n,d)&&(v=this.#ParseExpression(n),this.#Require(n,g)),this.#Allow(n,c)){if(!u)throw new Error("Semantic not allowed here.");this.#Require(n,t);a=n.PeekPrev().Text}if(this.#AllowOperator(n,"=")){if(!f)throw new Error("Initialization not allowed here.");y=this.#ParseExpression(n)}return new gt(h,l,o.length==1?o[0]:null,s,v,a,y)}#ParseTexture(n){let u=null,f=null,r=-1;if(this.#Require(n,t),u=n.PeekPrev().Text,this.#Require(n,t),f=n.PeekPrev().Text,r=this.#ParseRegisterIndex(n,"t"),r>=0)for(let n=0;n<this.#textures.length;n++)if(this.#textures[n].RegisterIndex==r)throw new Error("Duplicate texture register: t"+r);return this.#Require(n,i),new ei(u,f,r)}#ParseSampler(n){let u=null,f=null,r=-1;if(this.#Require(n,t),u=n.PeekPrev().Text,this.#Require(n,t),f=n.PeekPrev().Text,r=this.#ParseRegisterIndex(n,"s"),r>=0)for(let n=0;n<this.#samplers.length;n++)if(this.#samplers[n].RegisterIndex==r)throw new Error("Duplicate sampler register: s"+r);return this.#Require(n,i),new ui(u,f,r)}#ParseGlobalVarOrFunction(n,u){this.#Require(n,t);let s=n.PeekPrev().Text;this.#Require(n,t);let f=n.PeekPrev().Text;if(this.#Allow(n,o)){let i=[];do{if(n.Current().Type==r)break;i.push(this.#ParseMemberVariableOrFunctionParam(n,!0,!0,!0,!0))}while(this.#Allow(n,k));this.#Require(n,r);let u=null;this.#Allow(n,c)&&(this.#Require(n,t),u=n.PeekPrev().Text);this.#Require(n,l);let h=this.#ParseFunctionBody(n);this.#Require(n,e);let o=new ri(s,f,u,i,h,null);if(f=="main"){if(this.#main!=null)throw new Error("Multiple main functions detected");this.#main=o}else this.#functions.push(o);return!0}return this.#Allow(n,i)?(u.Members.push(new gt(s,f)),!0):!1}#ParseFunctionBody(n){let t=[];while(n.Current().Type!=e)t.push(this.#ParseStatement(n));return t}#ParseStatement(n){if(this.#Allow(n,l))return this.#ParseBlock(n);if(this.#AllowIdentifier(n,"do"))return this.#ParseDoWhile(n);if(this.#AllowIdentifier(n,"for"))return this.#ParseFor(n);if(this.#AllowIdentifier(n,"if"))return this.#ParseIf(n);if(this.#AllowIdentifier(n,"return"))return this.#ParseReturn(n);if(this.#AllowIdentifier(n,"switch"))return this.#ParseSwitch(n);if(this.#IsDataType(n.Current().Text)||n.Current().Text=="const")return this.#ParseVarDec(n);if(this.#AllowIdentifier(n,"while"))return this.#ParseWhile(n);if(this.#AllowIdentifier(n,"break")||this.#AllowIdentifier(n,"continue")||this.#AllowIdentifier(n,"discard")){let t=n.PeekPrev();return this.#Require(n,i),new pi(t)}return this.#ParseExpressionStatement(n)}#ParseBlock(n){let t=[];while(n.Current().Type!=e)t.push(this.#ParseStatement(n));return this.#Require(n,e),new si(t)}#ParseDoWhile(n){let t=this.#ParseStatement(n);this.#RequireIdentifier(n,"while");this.#Require(n,o);let u=this.#ParseExpression(n);return this.#Require(n,r),this.#Require(n,i),new li(t,u)}#ParseFor(n){let t=null,u=null,f=null,e=null;return this.#Require(n,o),this.#IsDataType(n.Current().Text)?t=this.#ParseVarDec(n):(t=this.#ParseExpressionStatement(n),this.#Require(n,i)),n.Current().Type!=i&&(u=this.#ParseExpression(n)),this.#Require(n,i),n.Current().Type!=r&&(f=this.#ParseExpression(n)),this.#Require(n,r),e=this.#ParseStatement(n),new vi(t,u,f,e)}#ParseIf(n){this.#Require(n,o);let i=this.#ParseExpression(n);this.#Require(n,r);let u=this.#ParseStatement(n),t=null;return this.#AllowIdentifier(n,"else")&&(t=this.#ParseStatement(n)),new yi(i,u,t)}#ParseReturn(n){if(this.#Allow(n,i))return new ni(null);let t=this.#ParseExpression(n);return this.#Require(n,i),new ni(t)}#ParseSwitch(n){let i=null,t=[];this.#Require(n,o);i=this.#ParseExpression(n);this.#Require(n,r);this.#Require(n,l);let u=!1;while(n.Current().Type!=e){let i=null;if(this.#AllowIdentifier(n,"case"))i=this.#ParseExpression(n);else if(this.#AllowIdentifier(n,"default")){if(u)throw new Error("More than one 'default' found in switch statement");u=!0}else throw new Error("Invalid token in switch statement: "+n.Current().Text);this.#Require(n,c);let r=[];while(n.Current().Text!="case"&&n.Current().Text!="default"&&n.Current().Type!=e)r.push(this.#ParseStatement(n));i==null?t.push(new ci(r)):t.push(new hi(i,r))}return this.#Require(n,e),new wi(i,t)}#ParseVarDec(n){let u=this.#AllowIdentifier(n,"const");this.#Require(n,t);let f=n.PeekPrev(),r=[];do{this.#Require(n,t);let o=n.PeekPrev(),i=null;this.#Allow(n,d)&&(i=this.#ParseExpression(n),this.#Require(n,g));let e=null;this.#AllowOperator(n,"=")&&(e=this.#ParseExpression(n));r.push(new di(u,f,o,i,e))}while(this.#Allow(n,k));if(r.length==0)throw new Error("Variable name expected");return this.#Require(n,i),new ki(u,f,r)}#ParseWhile(n){this.#Require(n,o);let t=this.#ParseExpression(n);this.#Require(n,r);let i=this.#ParseStatement(n);return new bi(t,i)}#ParseExpressionStatement(n){let t=this.#ParseExpression(n);return this.#Require(n,i),new ai(t)}#ParseExpression(n){return this.#ParseAssignment(n)}#ParseAssignment(n){let t=this.#ParseTernary(n);if(this.#AllowOperator(n,"=","+=","-=","*=","/=","%=","<<=",">>=","&=","^=","|=")){let r=n.PeekPrev().Text,i=t instanceof ExpVariable;if(!i&&t instanceof it&&(i=t.RightmostChildIsVariable()),!i)throw new Error("Expected variable for assignment.");return new nr(t,r,this.#ParseAssignment(n))}return t}#ParseTernary(n){let t=this.#ParseLogicalOr(n);if(this.#AllowOperator(n,"?")){let i=this.#ParseExpression(n);if(this.#Require(n,c)){let r=this.#ParseExpression(n);return new fr(t,i,r)}throw new Error("Expected ':' ternary operator");}return t}#ParseLogicalOr(n){let t=this.#ParseLogicalAnd(n);while(this.#AllowOperator(n,"||"))t=new ti(t,n.PeekPrev(),this.#ParseLogicalAnd(n));return t}#ParseLogicalAnd(n){let t=this.#ParseBitwiseOr(n);while(this.#AllowOperator(n,"&&"))t=new ti(t,n.PeekPrev(),this.#ParseBitwiseOr(n));return t}#ParseBitwiseOr(n){let t=this.#ParseBitwiseXor(n);while(this.#AllowOperator(n,"|"))t=new ht(t,n.PeekPrev(),this.#ParseBitwiseXor(n));return t}#ParseBitwiseXor(n){let t=this.#ParseBitwiseAnd(n);while(this.#AllowOperator(n,"^"))t=new ht(t,n.PeekPrev(),this.#ParseBitwiseAnd(n));return t}#ParseBitwiseAnd(n){let t=this.#ParseEquality(n);while(this.#AllowOperator(n,"&"))t=new ht(t,n.PeekPrev(),this.#ParseEquality(n));return t}#ParseEquality(n){let t=this.#ParseComparison(n);while(this.#AllowOperator(n,"==","!="))t=new w(t,n.PeekPrev(),this.#ParseComparison(n));return t}#ParseComparison(n){let t=this.#ParseShift(n);while(this.#AllowOperator(n,"<","<=",">",">="))t=new w(t,n.PeekPrev(),this.#ParseShift(n));return t}#ParseShift(n){let t=this.#ParseAddSubtract(n);while(this.#AllowOperator(n,"<<",">>"))t=new w(t,n.PeekPrev(),this.#ParseAddSubtract(n));return t}#ParseAddSubtract(n){let t=this.#ParseMulDivMod(n);while(this.#AllowOperator(n,"+","-"))t=new w(t,n.PeekPrev(),this.#ParseMulDivMod(n));return t}#ParseMulDivMod(n){let t=this.#ParseUnaryOrCast(n);while(this.#AllowOperator(n,"*","/","%"))t=new w(t,n.PeekPrev(),this.#ParseUnaryOrCast(n));return t}#ParseUnaryOrCast(n){if(this.#AllowOperator(n,"+","-","!","~","++","--"))return new ExpUnary(n.PeekPrev(),this.#ParseUnaryOrCast(n));if(n.Current().Type==o&&this.#IsDataType(n.PeekNext().Text)&&n.PeekNextNext().Type==r){this.#Require(n,o);this.#RequireDataType(n);let t=n.PeekPrev();return this.#Require(n,r),new tr(t,this.#ParseUnaryOrCast(n))}return this.#ParsePostfixCallArrayOrMember(n)}#ParsePostfixCallArrayOrMember(n){let i=this.#ParseOperandOrGrouping(n);for(;;)if(i instanceof tt||!this.#AllowOperator(n,"++","--"))if(i instanceof tt||!this.#Allow(n,o))if(this.#Allow(n,d))i=new gi(i,this.#ParseExpression(n)),this.#Require(n,g);else if(this.#Allow(n,yt))this.#Require(n,t),i=new it(i,new ExpVariable(n.PeekPrev()));else break;else{let t=[];if(n.Current().Type!=r)do t.push(this.#ParseExpression(n));while(this.#Allow(n,k));this.#Require(n,r);i=new tt(i,t);this.#CheckForTextureSampleCall(i)}else return new ur(i,n.PeekPrev());return i}#CheckForTextureSampleCall(n){if(n instanceof tt&&n.FuncExp instanceof it&&n.FuncExp.ExpLeft instanceof ExpVariable&&n.FuncExp.ExpRight instanceof ExpVariable){let i=n.FuncExp.ExpLeft.VarToken.Text;if(this.#IsTexture(i)){let u=n.FuncExp.ExpRight.VarToken.Text;switch(u){case"Sample":if(this.#shaderType!=a)throw new Error("Sample() only available in pixel shaders");break;case"SampleLevel":break;default:throw new Error("Invalid (or not implemented) texture member function found.");}if(n.Parameters.length<=1)throw new Error("Invalid number of parameters for texture sampling function");if(!(n.Parameters[0]instanceof ExpVariable))throw new Error("Sampler expected");let r=n.Parameters[0].VarToken.Text;if(!this.#IsSampler(r))throw new Error("Sampler expected");let t=null;for(let n=0;n<this.#textureSamplerCombinations.length;n++)if(this.#textureSamplerCombinations[n].TextureName==i&&this.#textureSamplerCombinations[n].SamplerName==r){t=this.#textureSamplerCombinations[n];break}t==null&&(t=new oi(i,r,this.#GetTexture(i),this.#GetSampler(r)),this.#textureSamplerCombinations.push(t));n.IsTextureSample=!0;n.CombinedTextureAndSampler=t}}}#ParseOperandOrGrouping(n){let i=n.Current();if(this.#AllowIdentifier(n,"true","false")||this.#Allow(n,vt))return new rr(n.PeekPrev());if(this.#Allow(n,t))return new ExpVariable(n.PeekPrev());if(this.#Allow(n,o)){let t=this.#ParseExpression(n);return this.#Require(n,r),new ir(t)}throw new Error("Invalid token detected");}#RegisterExists(n,t){for(let i=0;i<n.length;i++)if(n[i].RegisterIndex==t)return!0;return!1}#ResolveImplicitRegisters(n,t){let i=0;for(let r=0;r<n.length;r++)if(n[r].RegisterIndex==-1){while(this.#RegisterExists(n,i))i++;if(i>=t)throw new Error("Too many registers in use for shader");n[r].RegisterIndex=i;i++}}GetGLSL(){let n="";switch(this.#shaderType){case y:n=this.#ConvertVertexShader();break;case a:n=this.#ConvertPixelShader();break;default:throw new Error("Invalid shader type");}return n}#GetStructByName(n){for(let t=0;t<this.#structs.length;t++)if(this.#structs[t].Name==n)return this.#structs[t];return null}#GetHLSLOnlyFunctions(){let n="";return n+="mat4 mul(mat4 m1, mat4 m2){ return m1 * m2; }\n",n+="vec4 mul(vec4 v, mat4 m){ return v * m; }\n",n+="vec4 mul(mat4 m, vec4 v){ return m * v; }\n\n",n+="mat3 mul(mat3 m1, mat3 m2){ return m1 * m2; }\n",n+="vec3 mul(vec3 v, mat3 m){ return v * m; }\n",n+="vec3 mul(mat3 m, vec3 v){ return m * v; }\n\n",n+="mat2 mul(mat2 m1, mat2 m2){ return m1 * m2; }\n",n+="vec2 mul(vec2 v, mat2 m){ return v * m; }\n",n+="vec2 mul(mat2 m, vec2 v){ return m * v; }\n\n",n+="float saturate(float x) { return clamp(x, 0.0, 1.0); }\n",n+="vec2 saturate(vec2 x) { return clamp(x, 0.0, 1.0); }\n",n+="vec3 saturate(vec3 x) { return clamp(x, 0.0, 1.0); }\n",n+="int saturate(int x) { return clamp(x, 0, 1); }\n\n",n+="float lerp(float a, float b, float t) { return mix(a, b, t); }\n",n+="vec2 lerp(vec2 a, vec2 b, float t) { return mix(a, b, t); }\n",n+="vec2 lerp(vec2 a, vec2 b, vec2 t) { return mix(a, b, t); }\n",n+="vec3 lerp(vec3 a, vec3 b, float t) { return mix(a, b, t); }\n",n+="vec3 lerp(vec3 a, vec3 b, vec3 t) { return mix(a, b, t); }\n\n",n+="void sincos(float a, out float s, out float c) { s = sin(a); c = cos(a); }\n\n",n+="float atan2(float a, float b) { return atan(b, a); }\n\n",n+="float pow_hlsl(float a, float b) { return pow(a, b); }\n",n+="vec2 pow_hlsl(vec2 v, float f) { return pow(v, vec2(f)); }\n",n+="vec3 pow_hlsl(vec3 v, float f) { return pow(v, vec3(f)); }\n",n+="vec4 pow_hlsl(vec4 v, float f) { return pow(v, vec4(f)); }\n",n+"\n"}#GetMatrixConstructors(){let n="";return n+="mat2 float2x2_tr(mat2 m) { return mat2(m); }\n",n+="mat2 float2x2_tr(mat3 m) { return mat2(m); }\n",n+="mat2 float2x2_tr(mat4 m) { return mat2(m); }\n",n+="mat3 float3x3_tr(mat2 m) { return mat3(m); }\n",n+="mat3 float3x3_tr(mat3 m) { return mat3(m); }\n",n+="mat3 float3x3_tr(mat4 m) { return mat3(m); }\n",n+="mat4 float4x4_tr(mat2 m) { return mat4(m); }\n",n+="mat4 float4x4_tr(mat3 m) { return mat4(m); }\n",n+="mat4 float4x4_tr(mat4 m) { return mat4(m); }\n",n+="mat2 float2x2_tr(vec2 a, vec2 b) { return transpose(mat2(a,b)); }\n",n+="mat3 float3x3_tr(vec3 a, vec3 b, vec3 c) { return transpose(mat3(a,b,c)); }\n",n+="mat4 float4x4_tr(vec4 a, vec4 b, vec4 c, vec4 d) { return transpose(mat4(a,b,c,d)); }\n\n",n+"\n"}#ConvertVertexShader(){let n="#version 300 es\n\n",t=this.#GetVSInputs();return n+=this.#GetAttributesString(t),n+=this.#GetVSVaryings(),n+=this.#GetGlobalConstantsString(),n+=this.#GetStructsString(),n+=this.#GetCBuffersString(),n+=this.#GetHLSLOnlyFunctions(),n+=this.#GetMatrixConstructors(),n+=this.#GetTextureSamplerString(),n+=this.#GetFunctionsString(),n+this.#BuildVertexShaderMain(t)}#GetVSInputs(){if(this.#main==null)throw new Error("Missing main() function in shader");let n=[];for(let t=0;t<this.#main.Parameters.length;t++){let i=this.#main.Parameters[t];if(this.#IsStruct(i.DataType)){let t=this.#GetStructByName(i.DataType);if(t==null)throw new Error("Invalid data type in vertex shader input");for(let i=0;i<t.Members.length;i++)n.push(t.Members[i])}else n.push(i)}return n}#GetAttributesString(t){let i="";for(let r=0;r<t.length;r++)i+="in "+n.TranslateToGLSL(t[r].DataType)+" "+pt+t[r].Name+";\n";return i+="\n"}#GetVSVaryings(){if(!this.#IsStruct(this.#main.ReturnType))return"";let i=this.#GetStructByName(this.#main.ReturnType),t="";for(let r=0;r<i.Members.length;r++){let u=i.Members[r];(u.Semantic==null||u.Semantic.toUpperCase()!="SV_POSITION")&&(t+="out "+n.TranslateToGLSL(u.DataType),t+=" "+p+u.Semantic+";\n")}return t+="\n"}#GetStructsString(){let t="";for(let i=0;i<this.#structs.length;i++){let r=this.#structs[i];t+="struct "+n.TranslateToGLSL(r.Name)+"\n";t+="{\n";for(let i=0;i<r.Members.length;i++){let u=r.Members[i];t+="\t"+n.TranslateToGLSL(u.DataType);t+=" "+n.TranslateToGLSL(u.Name);u.ArraySize!=null&&(t+="["+u.ArraySize+"]");t+=";\n"}t+="};\n\n"}return t}#GetCBuffersString(){let t="",i="";switch(this.#shaderType){case a:i=ft;break;case y:i=ut}for(let r=0;r<this.#cbuffers.length;r++){let f=this.#cbuffers[r];t+="layout(std140) uniform "+n.TranslateToGLSL(i+f.Name)+"\n";t+="{\n";for(let i=0;i<f.Members.length;i++){let r=f.Members[i];t+="\t"+n.TranslateToGLSL(r.DataType);t+=" "+n.TranslateToGLSL(r.Name);r.ArrayExpression!=null&&(t+="["+r.ArrayExpression.ToString(u,"")+"]");t+=";\n"}t+="};\n\n"}return t}#GetTextureSamplerString(){if(this.#textureSamplerCombinations.length==0)return"";let n="";for(let t=0;t<this.#textureSamplerCombinations.length;t++){let r=this.#textureSamplerCombinations[t],i;switch(r.Texture.Type){case"Texture1D":case"Texture2D":i="sampler2D";break;case"Texture3D":i="sampler3D";break;case"TextureCube":i="samplerCube";break;default:throw new Error("Texture type '"+r.Texture.Type+"' not implemented yet!");}n+="uniform "+i+" "+r.CombinedName+";\n"}return n+="\n"}#GetGlobalConstantsString(){let n="";for(let t=0;t<this.#globalConstants.length;t++)n+=this.#globalConstants[t].ToString(u,"")+"\n";return n+="\n"}#GetFunctionsString(){let n="";for(let t=0;t<this.#functions.length;t++)n+=this.#functions[t].ToString(u)+"\n\n";return n+=this.#main.ToString(u,"hlsl_")+"\n\n"}#BuildVertexShaderMain(t){let i="void main()\n";i+="{\n";for(let r=0;r<t.length;r++)t[r].Semantic!=null&&t[r].Semantic.toUpperCase()=="SV_VERTEXID"?(i+="\tuint "+t[r].Name+" = ",i+="uint(gl_VertexID);\n"):(i+="\t"+n.TranslateToGLSL(t[r].DataType)+" "+t[r].Name+" = ",i+=pt+t[r].Name+";\n");for(let t=0;t<this.#main.Parameters.length;t++){let r=this.#main.Parameters[t];if(this.#IsStruct(r.DataType)){let t=n.TranslateToGLSL(r.Name);i+="\n\t"+r.DataType;i+=" "+t+";\n";let u=this.#GetStructByName(r.DataType);for(let r=0;r<u.Members.length;r++){let f=u.Members[r];i+="\t"+t+"."+n.TranslateToGLSL(f.Name)+" = ";i+=n.TranslateToGLSL(f.Name)+";\n"}}}i+="\n\t"+n.TranslateToGLSL(this.#main.ReturnType)+" "+nt+" = hlsl_main(";for(let t=0;t<this.#main.Parameters.length;t++)i+=n.TranslateToGLSL(this.#main.Parameters[t].Name),t<this.#main.Parameters.length-1&&(i+=", ");if(i+=");\n\n",this.#main.Semantic!=null&&this.#main.Semantic.toUpperCase()=="SV_POSITION")i+="\tgl_Position = "+nt+";\n";else{let n=null,t=this.#GetStructByName(this.#main.ReturnType);for(let r=0;r<t.Members.length;r++){let u=t.Members[r];u.Semantic!=null&&u.Semantic.toUpperCase()=="SV_POSITION"?n=u.Name:i+="\t"+p+u.Semantic+" = "+nt+"."+u.Name+";\n"}i+="\tgl_Position = "+nt+"."+n+";\n"}return i+="\tgl_PointSize = 1.0;\n",i+="}\n"}#GetPSInputs(){if(this.#main==null)throw new Error("Missing main() function in shader");let n=[];for(let t=0;t<this.#main.Parameters.length;t++){let i=this.#main.Parameters[t];if(this.#IsStruct(i.DataType)){let t=this.#GetStructByName(i.DataType);if(t==null)throw new Error("Invalid data type in pixel shader input");for(let i=0;i<t.Members.length;i++)n.push(t.Members[i])}else n.push(i)}return n}#GetPSVaryings(t){if(t.length==0)return"";let i="",r=!1;for(let t=0;t<this.#main.Parameters.length;t++){let u=this.#main.Parameters[t];if(this.#IsStruct(u.DataType)){let t=this.#GetStructByName(u.DataType);for(let u=0;u<t.Members.length;u++){let f=t.Members[u];if(f.Semantic!=null&&f.Semantic.toUpperCase()=="SV_POSITION"){r=!0;continue}i+="in "+n.TranslateToGLSL(f.DataType);i+=" "+p+f.Semantic+";\n"}}else u.Semantic!=null&&u.Semantic.toUpperCase()=="SV_POSITION"?r=!0:(i+="in "+n.TranslateToGLSL(u.DataType),i+=" "+p+u.Semantic+";\n")}return r,i+="\n"}#BuildPixelShaderMain(t){let i="void main()\n";i+="{\n";for(let r=0;r<t.length;r++)i+="\t"+n.TranslateToGLSL(t[r].DataType)+" "+t[r].Name+" = ",i+=t[r].Semantic.toUpperCase()=="SV_POSITION"?"gl_FragCoord;\n":p+t[r].Semantic+";\n";for(let t=0;t<this.#main.Parameters.length;t++){let r=this.#main.Parameters[t];if(this.#IsStruct(r.DataType)){let t=n.TranslateToGLSL(r.Name);i+="\n\t"+r.DataType;i+=" "+t+";\n";let u=this.#GetStructByName(r.DataType);for(let r=0;r<u.Members.length;r++){let f=u.Members[r];i+="\t"+t+"."+n.TranslateToGLSL(f.Name)+" = ";i+=n.TranslateToGLSL(f.Name)+";\n"}}}i+="\n\t"+n.TranslateToGLSL(this.#main.ReturnType)+" "+rt+" = hlsl_main(";for(let t=0;t<this.#main.Parameters.length;t++)i+=n.TranslateToGLSL(this.#main.Parameters[t].Name),t<this.#main.Parameters.length-1&&(i+=", ");if(i+=");\n\n",this.#main.Semantic!=null&&(this.#main.Semantic.toUpperCase()=="SV_TARGET"||this.#main.Semantic.toUpperCase()=="SV_TARGET0"))i+="\t"+et+" = "+rt+";\n";else{let n=null,t=this.#GetStructByName(this.#main.ReturnType);for(let i=0;i<t.Members.length;i++){let r=t.Members[i];if(r.Semantic!=null&&(r.toUpperCase()=="SV_TARGET"||r.toUpperCase()=="SV_TARGET0"))n=r.Name;else throw new Error("Error converting pixel shader: Only 1 render target currently supported");}i+="\t"+et+" = "+rt+"."+n+";\n"}return i+="}\n"}#ConvertPixelShader(){let n="#version 300 es\n\n",t=this.#GetPSInputs();return n+="precision mediump float;\n\n",n+="precision mediump sampler3D;\n\n",n+="out vec4 "+et+";\n\n",n+=this.#GetPSVaryings(t),n+=this.#GetGlobalConstantsString(),n+=this.#GetStructsString(),n+=this.#GetCBuffersString(),n+=this.#GetHLSLOnlyFunctions(),n+=this.#GetMatrixConstructors(),n+=this.#GetTextureSamplerString(),n+=this.#GetFunctionsString(),n+this.#BuildPixelShaderMain(t)}}class v{}class dt extends v{Name;NameGL;RegisterIndex;Members;constructor(n,t,i,r=[]){super();this.Name=n;this.NameGL=t;this.RegisterIndex=i;this.Members=r}}class ri extends v{ReturnType;Name;Semantic;Parameters;Statements;constructor(n,t,i,r,u){super();this.ReturnType=n;this.Name=t;this.Semantic=i;this.Parameters=r;this.Statements=u}ToString(t,i=""){let r="";switch(t){default:case h:throw new Error("IMPLEMENT ME");case u:r+=n.TranslateToGLSL(this.ReturnType)+" "+n.TranslateToGLSL(i+this.Name)+"(";for(let n=0;n<this.Parameters.length;n++)r+=this.Parameters[n].ToString(t),n<this.Parameters.length-1&&(r+=", ");r+=")\n";r+="{\n";for(let n=0;n<this.Statements.length;n++)r+=this.Statements[n].ToString(t,"\t")+"\n";r+="}"}return r}}class ui extends v{Type;Name;RegisterIndex;constructor(n,t,i){super();this.Type=n;this.Name=t;this.RegisterIndex=i}}class fi extends v{Name;Members;constructor(n,t){super();this.Name=n;this.Members=t}ToString(n){let t="struct "+this.Name+"\n";t+="{\n";for(let i=0;i<this.Members.length;i++)t+=this.Members[i].ToString(n,"\t");return t+="}\n"}}class ei extends v{Type;Name;RegisterIndex;constructor(n,t,i){super();this.Type=n;this.Name=t;this.RegisterIndex=i}}class oi extends v{TextureName;SamplerName;CombinedName;Texture;Sampler;constructor(n,t,i,r){super();this.TextureName=n;this.SamplerName=t;this.CombinedName="combined_"+n+"_"+t;this.Texture=i;this.Sampler=r}}class gt{DataType;Name;InputModifier;InterpModifiers;ArrayExpression;Semantic;InitializerExp;constructor(n,t,i=null,r=[],u=null,f=null,e=null){this.DataType=n;this.Name=t;this.InputModifier=i;this.InterpModifiers=r;this.ArrayExpression=u;this.Semantic=f;this.InitializerExp=e}ToString(t,i=""){let r=i;switch(t){default:case h:for(let n=0;n<this.InterpModifiers.length;n++)r+=this.InterpModifiers[n]+" ";this.InputModifier!=null&&(r+=this.InputModifier+" ");r+=this.DataType+" ";r+=this.Name;this.ArrayExpression!=null&&(r+=" ["+this.ArrayExpression.ToString(t)+"]");this.Semantic!=null&&(r+=" : "+this.Semantic);this.InitializerExp!=null&&(r+=" "+this.InitializerExp.ToString(t));break;case u:this.InputModifier!=null&&(r+=this.InputModifier+" ");r+=n.TranslateToGLSL(this.DataType)+" ";r+=n.TranslateToGLSL(this.Name);this.ArrayExpression!=null&&(r+=" ["+this.ArrayExpression.ToString(t)+"]");this.InitializerExp!=null&&(r+=" "+this.InitializerExp.ToString(t))}return r}}class f{}class si extends f{Statements;constructor(n){super();this.Statements=n}ToString(n,t=""){let i=t+"{\n";for(let r=0;r<this.Statements.length;r++)i+=this.Statements[r].ToString(n,t+"\t")+"\n";return i+=t+"}"}}class hi extends f{CaseValueExpression;Statements;constructor(n,t){super();this.CaseValueExpression=n;this.Statements=t}ToString(n,t=""){let i=t+"case "+this.CaseValueExpression.ToString(n)+":\n";for(let r=0;r<this.Statements.length;r++)i+=this.Statements[r].ToString(n,t+"\t")+"\n";return i}}class ci extends f{Statements;constructor(n){super();this.Statements=n}ToString(n,t=""){let i=t+"default:\n";for(let r=0;r<this.Statements.length;r++)i+=this.Statements[r].ToString(n,t+"\t")+"\n";return i}}class li extends f{Body;Condition;constructor(n,t){super();this.Body=n;this.Condition=t}ToString(n,t=""){let i=t+"do\n";return i+=this.Body.ToString(n,t+"\t"),i+(t+"while("+this.Condition.ToString(n)+");\n")}}class ai extends f{Exp;constructor(n){super();this.Exp=n}ToString(n,t=""){return t+this.Exp.ToString(n)+";"}}class vi extends f{InitStatement;ConditionExpression;IterateExpression;BodyStatement;constructor(n,t,i,r){super();this.InitStatement=n;this.ConditionExpression=t;this.IterateExpression=i;this.BodyStatement=r}ToString(n,t=""){let i=t+"for(";return i+=this.InitStatement.ToString(n,"")+" ",i+=this.ConditionExpression.ToString(n)+"; ",i+=this.IterateExpression.ToString(n)+")\n",i+this.BodyStatement.ToString(n,t+"\t")}}class yi extends f{Condition;If;Else;constructor(n,t,i){super();this.Condition=n;this.If=t;this.Else=i}ToString(n,t=""){let i=t+"if("+this.Condition.ToString(n)+")\n";return i+=this.If.ToString(n,t+"\t")+"\n",this.Else!=null&&(i+=t+"else\n",i+=this.Else.ToString(n,t+"\t")+"\n"),i}}class pi extends f{JumpToken;constructor(n){super();this.JumpToken=n}ToString(n,t=""){return t+this.JumpToken.Text+";"}}class ni extends f{Expression;constructor(n){super();this.Expression=n}ToString(n,t=""){return t+"return "+this.Expression.ToString(n)+";"}}class wi extends f{SelectorExpression;Cases;constructor(n,t){super();this.SelectorExpression=n;this.Cases=t}ToString(n,t=""){let i=t+"switch("+this.SelectorExpression.ToString(n)+")\n";i+=t+"{\n";for(let r=0;r<this.Cases.length;r++)i+=this.Cases[r].ToString(n,t+"\t");return i+=t+"}"}}class bi extends f{Condition;Body;constructor(n,t){super();this.Condition=n;this.Body=t}ToString(n,t=""){let i=t+"while("+this.Condition.ToString(n)+")\n";return i+this.Body.ToString(n,t+"\t")}}class ki extends f{IsConst;DataTypeToken;VarDecs;constructor(n,t,i){super();this.IsConst=n;this.DataTypeToken=t;this.VarDecs=i}ToString(t,i=""){let r=i;this.IsConst&&(r+="const ");switch(t){default:case h:r+=this.DataTypeToken.Text+" ";break;case u:r+=n.TranslateToGLSL(this.DataTypeToken.Text)+" "}for(let n=0;n<this.VarDecs.length;n++)n>0&&(r+=", "),r+=this.VarDecs[n].ToString(t);return r+=";"}}class di extends f{IsConst;DataTypeToken;NameToken;ArrayExpression;DefinitionExpression;constructor(n,t,i,r,u){super();this.IsConst=n;this.DataTypeToken=t;this.NameToken=i;this.ArrayExpression=r;this.DefinitionExpression=u}ToString(t){let i="";switch(t){default:case h:i+=this.NameToken.Text;break;case u:i+=n.TranslateToGLSL(this.NameToken.Text)}return this.ArrayExpression!=null&&(i+="["+this.ArrayExpression.ToString(t)+"]"),this.DefinitionExpression!=null&&(i+=" = "+this.DefinitionExpression.ToString(t)),i}}class s{}class gi extends s{ExpArray;ExpIndex;constructor(n,t){super();this.ExpArray=n;this.ExpIndex=t}ToString(n){return this.ExpArray.ToString(n)+"["+this.ExpIndex.ToString(n)+"]"}}class nr extends s{VarExp;AssignOperator;AssignExp;constructor(n,t,i){super();this.VarExp=n;this.AssignOperator=t;this.AssignExp=i}ToString(n){return this.VarExp.ToString(n)+" "+this.AssignOperator+" "+this.AssignExp.ToString(n)}}class w extends s{ExpLeft;OperatorToken;ExpRight;constructor(n,t,i){super();this.ExpLeft=n;this.OperatorToken=t;this.ExpRight=i}ToString(n){return this.ExpLeft.ToString(n)+" "+this.OperatorToken.Text+" "+this.ExpRight.ToString(n)}}class ht extends s{ExpLeft;OperatorToken;ExpRight;constructor(n,t,i){super();this.ExpLeft=n;this.OperatorToken=t;this.ExpRight=i}ToString(n){return this.ExpLeft.ToString(n)+" "+this.OperatorToken.Text+" "+this.ExpRight.ToString(n)}}class tr extends s{TypeToken;Exp;constructor(n,t){super();this.TypeToken=n;this.Exp=t}ToString(t){switch(t){default:case h:return"("+this.TypeToken.Text+")"+this.Exp.ToString(t);case u:return n.TranslateToGLSL(this.TypeToken.Text)+"("+this.Exp.ToString(t)+")"}}}class tt extends s{FuncExp;Parameters;IsTextureSample;CombinedTextureAndSampler;constructor(n,t){super();this.FuncExp=n;this.Parameters=t;this.IsTextureSample=!1;this.CombinedTextureAndSampler=null}ToString(n){if(n==u&&this.IsTextureSample){let r=this.FuncExp.ExpRight.VarToken.Text;if(!kt.hasOwnProperty(r))throw new Error("Sample function type not yet implemented!");let i=kt[r]+"("+this.CombinedTextureAndSampler.CombinedName+", ",t=this.Parameters[1].ToString(n);switch(this.CombinedTextureAndSampler.Texture.Type){case"Texture1D":t="vec2("+t+", 0.5)";break;case"Texture2D":t="vec2(0.0, 1.0) + vec2(1.0, -1.0) * ("+t+")";break;case"Texture3D":t="vec3(0.0, 1.0, 0.0) + vec3(1.0, -1.0, 1.0) * ("+t+")";break;case"TextureCube":t="vec3(1.0, -1.0, 1.0) * ("+t+")";break;default:throw new Error("Invalid texture type or not yet implemented");}i+=t;for(let t=2;t<this.Parameters.length;t++)i+=", "+this.Parameters[t].ToString(n);return i+=")"}else{let t=this.FuncExp.ToString(n);if(n==u&&this.FuncExp instanceof ExpVariable){let n=this.FuncExp.VarToken.Text;bt.hasOwnProperty(n)&&(t=bt[n])}t+="(";for(let i=0;i<this.Parameters.length;i++)i>0&&(t+=", "),t+=this.Parameters[i].ToString(n);return t+=")"}}}class ir extends s{Exp;constructor(n){super();this.Exp=n}ToString(n){return"("+this.Exp.ToString(n)+")"}}class rr extends s{LiteralToken;constructor(n){super();this.LiteralToken=n}ToString(){return this.LiteralToken.Text}}class ti extends s{ExpLeft;OperatorToken;ExpRight;constructor(n,t,i){super();this.ExpLeft=n;this.OperatorToken=t;this.ExpRight=i}ToString(n){return this.ExpLeft.ToString(n)+" "+this.OperatorToken.Text+" "+this.ExpRight.ToString(n)}}class it extends s{ExpLeft;ExpRight;constructor(n,t){super();this.ExpLeft=n;this.ExpRight=t}RightmostChildIsVariable(){let n=this.ExpRight;while(n instanceof it)n=n.ExpRight;return n instanceof ExpVariable}ToString(n){switch(n){default:case h:return this.ExpLeft.ToString(n)+"."+this.ExpRight.ToString(n);case u:let i=this.ExpLeft.ToString(n),t=this.ExpRight.ToString(n);return wt.hasOwnProperty(t)?i+wt[t]:i+"."+t}}}class ur extends s{ExpLeft;OperatorToken;constructor(n,t){super();this.ExpLeft=n;this.OperatorToken=t}ToString(n){return this.ExpLeft.ToString(n)+this.OperatorToken.Text}}class fr extends s{ExpCondition
	ExpIf{return ExpElse,constructor(expCondition,expIf,expElse),super(),this.ExpCondition=expCondition,this.ExpIf=expIf,this.ExpElse=expElse,ToString(lang),this.ExpCondition.ToString(lang)+" ? "+this.ExpIf.ToString(lang)+" : "+this.ExpElse.ToString(lang)}class ExpUnary extends Expression{return OperatorToken,ExpRight,constructor(opToken,expRight),super(),this.OperatorToken=opToken,this.ExpRight=expRight,ToString(lang),this.OperatorToken.Text+this.ExpRight.ToString(lang)}class ExpVariable extends Expression{VarToken;constructor(varToken);super();this.VarToken=varToken;ToString(lang);switch(lang){default:case h:return this.VarToken.Text;case u:return n.TranslateToGLSL(this.VarToken.Text)}}}}}